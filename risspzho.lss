
risspzho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00002ae0  00002b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800156  00002bd6  00002c4a  2**0
                  ALLOC
  3 .stab         00002790  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e8  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//============================================================
//                 		PROGRAM G£ÓWNY
//============================================================

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	6c 97       	sbiw	r28, 0x1c	; 28
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61

	wskf_int[0] = &Wybieg;
      a6:	8e eb       	ldi	r24, 0xBE	; 190
      a8:	97 e0       	ldi	r25, 0x07	; 7
      aa:	90 93 b8 01 	sts	0x01B8, r25
      ae:	80 93 b7 01 	sts	0x01B7, r24
	wskf_int[1] = &Rozruch;
      b2:	8a e3       	ldi	r24, 0x3A	; 58
      b4:	98 e0       	ldi	r25, 0x08	; 8
      b6:	90 93 ba 01 	sts	0x01BA, r25
      ba:	80 93 b9 01 	sts	0x01B9, r24
	wskf_int[2] = &Hamowanie;
      be:	88 e0       	ldi	r24, 0x08	; 8
      c0:	9b e0       	ldi	r25, 0x0B	; 11
      c2:	90 93 bc 01 	sts	0x01BC, r25
      c6:	80 93 bb 01 	sts	0x01BB, r24
	wskf_int[3] = &Klawiatura;
      ca:	8d ed       	ldi	r24, 0xDD	; 221
      cc:	94 e0       	ldi	r25, 0x04	; 4
      ce:	90 93 be 01 	sts	0x01BE, r25
      d2:	80 93 bd 01 	sts	0x01BD, r24
	wskf_int[4] = &Wychylenie_Nastawnika;
      d6:	87 ef       	ldi	r24, 0xF7	; 247
      d8:	96 e0       	ldi	r25, 0x06	; 6
      da:	90 93 c0 01 	sts	0x01C0, r25
      de:	80 93 bf 01 	sts	0x01BF, r24
	
	wskf_P_ADC = &Przetwornik_ADC;
      e2:	81 e6       	ldi	r24, 0x61	; 97
      e4:	96 e0       	ldi	r25, 0x06	; 6
      e6:	90 93 73 01 	sts	0x0173, r25
      ea:	80 93 72 01 	sts	0x0172, r24
	
	wskf_void[0] = &Inicjalizacja_CPU;
      ee:	8f e1       	ldi	r24, 0x1F	; 31
      f0:	92 e0       	ldi	r25, 0x02	; 2
      f2:	90 93 b4 01 	sts	0x01B4, r25
      f6:	80 93 b3 01 	sts	0x01B3, r24
	wskf_void[1] = &Pobierz_Wartosci;
      fa:	8b e7       	ldi	r24, 0x7B	; 123
      fc:	92 e0       	ldi	r25, 0x02	; 2
      fe:	90 93 b6 01 	sts	0x01B6, r25
     102:	80 93 b5 01 	sts	0x01B5, r24
	
	wskf_w_float = &wyswietl_float;
     106:	80 ea       	ldi	r24, 0xA0	; 160
     108:	9d e0       	ldi	r25, 0x0D	; 13
     10a:	90 93 98 01 	sts	0x0198, r25
     10e:	80 93 97 01 	sts	0x0197, r24
	
	wskf_P_Pom = &Prad_Pomierzony;
     112:	8d e4       	ldi	r24, 0x4D	; 77
     114:	97 e0       	ldi	r25, 0x07	; 7
     116:	90 93 71 01 	sts	0x0171, r25
     11a:	80 93 70 01 	sts	0x0170, r24
	
	wskf_P_Zad = &Prad_Zadany;
     11e:	8e e1       	ldi	r24, 0x1E	; 30
     120:	97 e0       	ldi	r25, 0x07	; 7
     122:	90 93 aa 01 	sts	0x01AA, r25
     126:	80 93 a9 01 	sts	0x01A9, r24
	
	wskf_R_PI = &Regulator_PI;
     12a:	86 e1       	ldi	r24, 0x16	; 22
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	90 93 89 01 	sts	0x0189, r25
     132:	80 93 88 01 	sts	0x0188, r24

	while(1)
	{	
	
		Inicjalizacja_CPU();
     136:	0e 94 1f 02 	call	0x43e	; 0x43e <Inicjalizacja_CPU>
//		(*wskf_void[0])();
		
		if(!reset)
     13a:	80 91 6c 01 	lds	r24, 0x016C
     13e:	90 91 6d 01 	lds	r25, 0x016D
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	09 f0       	breq	.+2      	; 0x148 <main+0xb6>
     146:	7c c0       	rjmp	.+248    	; 0x240 <main+0x1ae>
		{
			lcd_clrscr();
     148:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>

			lcd_puts("   Regulator\n");
     14c:	81 e7       	ldi	r24, 0x71	; 113
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			lcd_puts("     pradu  ");
     154:	8f e7       	ldi	r24, 0x7F	; 127
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e4       	ldi	r25, 0x40	; 64
     160:	ac e1       	ldi	r26, 0x1C	; 28
     162:	b5 e4       	ldi	r27, 0x45	; 69
     164:	89 8f       	std	Y+25, r24	; 0x19
     166:	9a 8f       	std	Y+26, r25	; 0x1a
     168:	ab 8f       	std	Y+27, r26	; 0x1b
     16a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	4a ef       	ldi	r20, 0xFA	; 250
     172:	54 e4       	ldi	r21, 0x44	; 68
     174:	69 8d       	ldd	r22, Y+25	; 0x19
     176:	7a 8d       	ldd	r23, Y+26	; 0x1a
     178:	8b 8d       	ldd	r24, Y+27	; 0x1b
     17a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     17c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	8d 8b       	std	Y+21, r24	; 0x15
     186:	9e 8b       	std	Y+22, r25	; 0x16
     188:	af 8b       	std	Y+23, r26	; 0x17
     18a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e8       	ldi	r20, 0x80	; 128
     192:	5f e3       	ldi	r21, 0x3F	; 63
     194:	6d 89       	ldd	r22, Y+21	; 0x15
     196:	7e 89       	ldd	r23, Y+22	; 0x16
     198:	8f 89       	ldd	r24, Y+23	; 0x17
     19a:	98 8d       	ldd	r25, Y+24	; 0x18
     19c:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
     1a0:	88 23       	and	r24, r24
     1a2:	2c f4       	brge	.+10     	; 0x1ae <main+0x11c>
		__ticks = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	9c 8b       	std	Y+20, r25	; 0x14
     1aa:	8b 8b       	std	Y+19, r24	; 0x13
     1ac:	3f c0       	rjmp	.+126    	; 0x22c <main+0x19a>
	else if (__tmp > 65535)
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	3f ef       	ldi	r19, 0xFF	; 255
     1b2:	4f e7       	ldi	r20, 0x7F	; 127
     1b4:	57 e4       	ldi	r21, 0x47	; 71
     1b6:	6d 89       	ldd	r22, Y+21	; 0x15
     1b8:	7e 89       	ldd	r23, Y+22	; 0x16
     1ba:	8f 89       	ldd	r24, Y+23	; 0x17
     1bc:	98 8d       	ldd	r25, Y+24	; 0x18
     1be:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     1c2:	18 16       	cp	r1, r24
     1c4:	4c f5       	brge	.+82     	; 0x218 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	69 8d       	ldd	r22, Y+25	; 0x19
     1d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1d6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	9c 8b       	std	Y+20, r25	; 0x14
     1ec:	8b 8b       	std	Y+19, r24	; 0x13
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <main+0x17c>
     1f0:	88 ec       	ldi	r24, 0xC8	; 200
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	9a 8b       	std	Y+18, r25	; 0x12
     1f6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f8:	89 89       	ldd	r24, Y+17	; 0x11
     1fa:	9a 89       	ldd	r25, Y+18	; 0x12
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x16a>
     200:	9a 8b       	std	Y+18, r25	; 0x12
     202:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     204:	8b 89       	ldd	r24, Y+19	; 0x13
     206:	9c 89       	ldd	r25, Y+20	; 0x14
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	9c 8b       	std	Y+20, r25	; 0x14
     20c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20e:	8b 89       	ldd	r24, Y+19	; 0x13
     210:	9c 89       	ldd	r25, Y+20	; 0x14
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	69 f7       	brne	.-38     	; 0x1f0 <main+0x15e>
     216:	14 c0       	rjmp	.+40     	; 0x240 <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     218:	6d 89       	ldd	r22, Y+21	; 0x15
     21a:	7e 89       	ldd	r23, Y+22	; 0x16
     21c:	8f 89       	ldd	r24, Y+23	; 0x17
     21e:	98 8d       	ldd	r25, Y+24	; 0x18
     220:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9c 8b       	std	Y+20, r25	; 0x14
     22a:	8b 8b       	std	Y+19, r24	; 0x13
     22c:	8b 89       	ldd	r24, Y+19	; 0x13
     22e:	9c 89       	ldd	r25, Y+20	; 0x14
     230:	98 8b       	std	Y+16, r25	; 0x10
     232:	8f 87       	std	Y+15, r24	; 0x0f
     234:	8f 85       	ldd	r24, Y+15	; 0x0f
     236:	98 89       	ldd	r25, Y+16	; 0x10
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x1a6>
     23c:	98 8b       	std	Y+16, r25	; 0x10
     23e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2500);
		}

		sei(); 								//wlaczenie obslugi przerwan
     240:	78 94       	sei
 	   reset = 0;
     242:	10 92 6d 01 	sts	0x016D, r1
     246:	10 92 6c 01 	sts	0x016C, r1
 	   r_jazdy = 0;
     24a:	10 92 c2 01 	sts	0x01C2, r1
     24e:	10 92 c1 01 	sts	0x01C1, r1


		Pobierz_Wartosci();
     252:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Pobierz_Wartosci>
//		(*wskf_void[1])();

		war_przejscia = 0;
     256:	10 92 a8 01 	sts	0x01A8, r1
     25a:	10 92 a7 01 	sts	0x01A7, r1
		
		r_jazdy = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 c2 01 	sts	0x01C2, r25
     266:	80 93 c1 01 	sts	0x01C1, r24
	
	   blad = 0;
     26a:	10 92 a6 01 	sts	0x01A6, r1
     26e:	10 92 a5 01 	sts	0x01A5, r1
     272:	5a c0       	rjmp	.+180    	; 0x328 <main+0x296>
	

   	while(!blad)
   	{
     	      	
	      lcd_clrscr();
     274:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
      	lcd_puts("     WYBIEG");
     278:	8c e8       	ldi	r24, 0x8C	; 140
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
      	blad = Wybieg();
     280:	0e 94 be 07 	call	0xf7c	; 0xf7c <Wybieg>
     284:	90 93 a6 01 	sts	0x01A6, r25
     288:	80 93 a5 01 	sts	0x01A5, r24
      	
      	war_przejscia = 0;
     28c:	10 92 a8 01 	sts	0x01A8, r1
     290:	10 92 a7 01 	sts	0x01A7, r1


      	if(bit_is_set(PIND,0) && !bit_is_set(PIND,1) && war_przejscia != 2)
     294:	e0 e3       	ldi	r30, 0x30	; 48
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	81 70       	andi	r24, 0x01	; 1
     2a0:	90 70       	andi	r25, 0x00	; 0
     2a2:	88 23       	and	r24, r24
     2a4:	e1 f0       	breq	.+56     	; 0x2de <main+0x24c>
     2a6:	e0 e3       	ldi	r30, 0x30	; 48
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	82 70       	andi	r24, 0x02	; 2
     2b2:	90 70       	andi	r25, 0x00	; 0
     2b4:	00 97       	sbiw	r24, 0x00	; 0
     2b6:	99 f4       	brne	.+38     	; 0x2de <main+0x24c>
     2b8:	80 91 a7 01 	lds	r24, 0x01A7
     2bc:	90 91 a8 01 	lds	r25, 0x01A8
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	91 05       	cpc	r25, r1
     2c4:	61 f0       	breq	.+24     	; 0x2de <main+0x24c>
      	{
     	   	blad = Rozruch();
     2c6:	0e 94 3a 08 	call	0x1074	; 0x1074 <Rozruch>
     2ca:	90 93 a6 01 	sts	0x01A6, r25
     2ce:	80 93 a5 01 	sts	0x01A5, r24
//         	blad = (*wskf_int[1])();
         	
      		war_przejscia = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 a8 01 	sts	0x01A8, r25
     2da:	80 93 a7 01 	sts	0x01A7, r24
      	}

		 	if(bit_is_set(PIND,1) && !bit_is_set(PIND,0) && war_przejscia != 1)
     2de:	e0 e3       	ldi	r30, 0x30	; 48
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 70       	andi	r24, 0x02	; 2
     2ea:	90 70       	andi	r25, 0x00	; 0
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	e1 f0       	breq	.+56     	; 0x328 <main+0x296>
     2f0:	e0 e3       	ldi	r30, 0x30	; 48
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	81 70       	andi	r24, 0x01	; 1
     2fc:	90 70       	andi	r25, 0x00	; 0
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	99 f4       	brne	.+38     	; 0x328 <main+0x296>
     302:	80 91 a7 01 	lds	r24, 0x01A7
     306:	90 91 a8 01 	lds	r25, 0x01A8
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	91 05       	cpc	r25, r1
     30e:	61 f0       	breq	.+24     	; 0x328 <main+0x296>
      	{
      		blad = Hamowanie();
     310:	0e 94 08 0b 	call	0x1610	; 0x1610 <Hamowanie>
     314:	90 93 a6 01 	sts	0x01A6, r25
     318:	80 93 a5 01 	sts	0x01A5, r24
      	   //blad = (*wskf_int[2])();
      	
      		war_przejscia = 2;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	90 93 a8 01 	sts	0x01A8, r25
     324:	80 93 a7 01 	sts	0x01A7, r24
		r_jazdy = 1;
	
	   blad = 0;
	

   	while(!blad)
     328:	80 91 a5 01 	lds	r24, 0x01A5
     32c:	90 91 a6 01 	lds	r25, 0x01A6
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	09 f4       	brne	.+2      	; 0x336 <main+0x2a4>
     334:	9f cf       	rjmp	.-194    	; 0x274 <main+0x1e2>
      	
      		war_przejscia = 2;
      	}
   	}
	
		OCR1A = 0;
     336:	ea e4       	ldi	r30, 0x4A	; 74
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1
	
		if(!reset)
     33e:	80 91 6c 01 	lds	r24, 0x016C
     342:	90 91 6d 01 	lds	r25, 0x016D
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	09 f0       	breq	.+2      	; 0x34c <main+0x2ba>
     34a:	f5 ce       	rjmp	.-534    	; 0x136 <main+0xa4>
	   {
			lcd_clrscr();
     34c:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
			lcd_puts("Za duzy prad!!!");
     350:	88 e9       	ldi	r24, 0x98	; 152
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e4       	ldi	r25, 0x40	; 64
     35c:	ac e1       	ldi	r26, 0x1C	; 28
     35e:	b5 e4       	ldi	r27, 0x45	; 69
     360:	8b 87       	std	Y+11, r24	; 0x0b
     362:	9c 87       	std	Y+12, r25	; 0x0c
     364:	ad 87       	std	Y+13, r26	; 0x0d
     366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	4a ef       	ldi	r20, 0xFA	; 250
     36e:	54 e4       	ldi	r21, 0x44	; 68
     370:	6b 85       	ldd	r22, Y+11	; 0x0b
     372:	7c 85       	ldd	r23, Y+12	; 0x0c
     374:	8d 85       	ldd	r24, Y+13	; 0x0d
     376:	9e 85       	ldd	r25, Y+14	; 0x0e
     378:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	8f 83       	std	Y+7, r24	; 0x07
     382:	98 87       	std	Y+8, r25	; 0x08
     384:	a9 87       	std	Y+9, r26	; 0x09
     386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e8       	ldi	r20, 0x80	; 128
     38e:	5f e3       	ldi	r21, 0x3F	; 63
     390:	6f 81       	ldd	r22, Y+7	; 0x07
     392:	78 85       	ldd	r23, Y+8	; 0x08
     394:	89 85       	ldd	r24, Y+9	; 0x09
     396:	9a 85       	ldd	r25, Y+10	; 0x0a
     398:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
     39c:	88 23       	and	r24, r24
     39e:	2c f4       	brge	.+10     	; 0x3aa <main+0x318>
		__ticks = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9e 83       	std	Y+6, r25	; 0x06
     3a6:	8d 83       	std	Y+5, r24	; 0x05
     3a8:	3f c0       	rjmp	.+126    	; 0x428 <main+0x396>
	else if (__tmp > 65535)
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	3f ef       	ldi	r19, 0xFF	; 255
     3ae:	4f e7       	ldi	r20, 0x7F	; 127
     3b0:	57 e4       	ldi	r21, 0x47	; 71
     3b2:	6f 81       	ldd	r22, Y+7	; 0x07
     3b4:	78 85       	ldd	r23, Y+8	; 0x08
     3b6:	89 85       	ldd	r24, Y+9	; 0x09
     3b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ba:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     3be:	18 16       	cp	r1, r24
     3c0:	4c f5       	brge	.+82     	; 0x414 <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e2       	ldi	r20, 0x20	; 32
     3c8:	51 e4       	ldi	r21, 0x41	; 65
     3ca:	6b 85       	ldd	r22, Y+11	; 0x0b
     3cc:	7c 85       	ldd	r23, Y+12	; 0x0c
     3ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     3d2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	9e 83       	std	Y+6, r25	; 0x06
     3e8:	8d 83       	std	Y+5, r24	; 0x05
     3ea:	0f c0       	rjmp	.+30     	; 0x40a <main+0x378>
     3ec:	88 ec       	ldi	r24, 0xC8	; 200
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9c 83       	std	Y+4, r25	; 0x04
     3f2:	8b 83       	std	Y+3, r24	; 0x03
     3f4:	8b 81       	ldd	r24, Y+3	; 0x03
     3f6:	9c 81       	ldd	r25, Y+4	; 0x04
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x366>
     3fc:	9c 83       	std	Y+4, r25	; 0x04
     3fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     400:	8d 81       	ldd	r24, Y+5	; 0x05
     402:	9e 81       	ldd	r25, Y+6	; 0x06
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	9e 83       	std	Y+6, r25	; 0x06
     408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40a:	8d 81       	ldd	r24, Y+5	; 0x05
     40c:	9e 81       	ldd	r25, Y+6	; 0x06
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	69 f7       	brne	.-38     	; 0x3ec <main+0x35a>
     412:	91 ce       	rjmp	.-734    	; 0x136 <main+0xa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     414:	6f 81       	ldd	r22, Y+7	; 0x07
     416:	78 85       	ldd	r23, Y+8	; 0x08
     418:	89 85       	ldd	r24, Y+9	; 0x09
     41a:	9a 85       	ldd	r25, Y+10	; 0x0a
     41c:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	9e 83       	std	Y+6, r25	; 0x06
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	8d 81       	ldd	r24, Y+5	; 0x05
     42a:	9e 81       	ldd	r25, Y+6	; 0x06
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <main+0x3a2>
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	7c ce       	rjmp	.-776    	; 0x136 <main+0xa4>

0000043e <Inicjalizacja_CPU>:
//                 	DEFINICJE FUNKCJI
//============================================================


void Inicjalizacja_CPU(void)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62

// DDRx 1 - wyjscie wowczas PORTx ustawiony jako 1,
// 0 - wejscie PORTx ustawiony jako 0,

/*ADC PA0, PA1*/
	DDRA = 0x00;					// bity 0 - 7 jako wejæia,
     446:	ea e3       	ldi	r30, 0x3A	; 58
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	10 82       	st	Z, r1
//	PORTA = 0x00;

/*Klawiatura*/
	DDRB = 0x0F;					// bity 0 - 3 jako wyjcia,
     44c:	e7 e3       	ldi	r30, 0x37	; 55
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	8f e0       	ldi	r24, 0x0F	; 15
     452:	80 83       	st	Z, r24
										// 4 - 7 jako wejcia
	PORTB = 0xFF;					// wejcia z podci¹ganiem
     454:	e8 e3       	ldi	r30, 0x38	; 56
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	80 83       	st	Z, r24

/*LCD*/
//	DDRC = 0xFF;					// bity 0 - 7 jako wyjcia

/*Wyjcie PWM, T1, T2, Sygna³ R, Sygna³ H, Reset zewnêtrzny*/
	DDRD = 0x70;					// bity 0 - 3 oraz bit 7 jako wejcia
     45c:	e1 e3       	ldi	r30, 0x31	; 49
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 e7       	ldi	r24, 0x70	; 112
     462:	80 83       	st	Z, r24
	PORTD = 0x07; //0x07;					// bity 4 - 6 jako wyjcia	
     464:	e2 e3       	ldi	r30, 0x32	; 50
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	80 83       	st	Z, r24
										
										// ADLAR = 0 (tryb 10 bitowy)
	
// Je¿eli ADCSRA nie dziala nale¿y u¿yæ nzwy ADCSR.
	
	ADCSRA |= _BV(ADPS1);		// Czêstotliwoæ taktowania przetwornika	
     46c:	a6 e2       	ldi	r26, 0x26	; 38
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e6 e2       	ldi	r30, 0x26	; 38
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	82 60       	ori	r24, 0x02	; 2
     478:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADPS2);		// (1/64 czêstotliwoci zegara kontrolera)
     47a:	a6 e2       	ldi	r26, 0x26	; 38
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e6 e2       	ldi	r30, 0x26	; 38
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	84 60       	ori	r24, 0x04	; 4
     486:	8c 93       	st	X, r24
	
	ADCSRA |= _BV(ADEN);			// Odblokowanie przetwornika (zezwolenie
     488:	a6 e2       	ldi	r26, 0x26	; 38
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e6 e2       	ldi	r30, 0x26	; 38
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	80 68       	ori	r24, 0x80	; 128
     494:	8c 93       	st	X, r24
//************************************************************

// Rozdzielczosc PWM: Rpcpwm = log(TOP + 1)/log(2) = 10 bit,
// Czêstotliwoæ PWM: focnxpwm = fclk/(2 * N * TOP) = 2kHz.

	TCCR1A |= _BV(COM1A1);		// Clear OC1A/OC1B on compare match,
     496:	af e4       	ldi	r26, 0x4F	; 79
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	ef e4       	ldi	r30, 0x4F	; 79
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	80 68       	ori	r24, 0x80	; 128
     4a2:	8c 93       	st	X, r24
										// set OC1A/OC1B at BOTTOM.
	
	TCCR1B |= _BV(WGM13);		// Mode 10: PWM, Phase Correct,
     4a4:	ae e4       	ldi	r26, 0x4E	; 78
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	ee e4       	ldi	r30, 0x4E	; 78
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	80 61       	ori	r24, 0x10	; 16
     4b0:	8c 93       	st	X, r24
	TCCR1A |= _BV(WGM11);      // TOP = ICR1.
     4b2:	af e4       	ldi	r26, 0x4F	; 79
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	ef e4       	ldi	r30, 0x4F	; 79
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	82 60       	ori	r24, 0x02	; 2
     4be:	8c 93       	st	X, r24
	
	TCCR1B |= _BV(CS10);			// clk / 1 - bez preskalera.
     4c0:	ae e4       	ldi	r26, 0x4E	; 78
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	ee e4       	ldi	r30, 0x4E	; 78
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	81 60       	ori	r24, 0x01	; 1
     4cc:	8c 93       	st	X, r24
	
	ICR1 = 0x7D0;					// ICR1=2000, aby uzyskac 2kHz i 10 bit.
     4ce:	e6 e4       	ldi	r30, 0x46	; 70
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 ed       	ldi	r24, 0xD0	; 208
     4d4:	97 e0       	ldi	r25, 0x07	; 7
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	80 83       	st	Z, r24
	
//************************************************************
//							Konfiguracja LCD
//************************************************************	

	lcd_init(LCD_DISP_ON);		// Inicjalizacja wyswietlacza
     4da:	8c e0       	ldi	r24, 0x0C	; 12
     4dc:	0e 94 9f 12 	call	0x253e	; 0x253e <lcd_init>
	
//************************************************************
//		Konfiguracja Przerwania INT0 - Reset zewnetrzny PD2
//************************************************************	

	GICR = _BV(INT0);
     4e0:	eb e5       	ldi	r30, 0x5B	; 91
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	80 83       	st	Z, r24
	
	MCUCR = _BV(ISC01);
     4e8:	e5 e5       	ldi	r30, 0x55	; 85
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	80 83       	st	Z, r24
}
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <Pobierz_Wartosci>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void Pobierz_Wartosci(void)
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	aa 97       	sbiw	r28, 0x2a	; 42
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
	
	i_war_wy = 0;
     50a:	10 92 87 01 	sts	0x0187, r1
     50e:	10 92 86 01 	sts	0x0186, r1
     512:	c7 c0       	rjmp	.+398    	; 0x6a2 <Pobierz_Wartosci+0x1ac>
//	i_war_cof = 0;


	while(!i_war_wy)
	{	
		lcd_clrscr();
     514:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
	
		lcd_puts("I rozruchu:\n");
     518:	88 ea       	ldi	r24, 0xA8	; 168
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		lcd_puts("Ir = ");
     520:	85 eb       	ldi	r24, 0xB5	; 181
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		
		lcd_command(LCD_DISP_ON_CURSOR);
     528:	8e e0       	ldi	r24, 0x0E	; 14
     52a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
     52e:	13 c0       	rjmp	.+38     	; 0x556 <Pobierz_Wartosci+0x60>

		while(!i_war_cof)	
   	{
    			
    		i_war_cof = Klawiatura();   	// Obs³uga klawiszy
     530:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Klawiatura>
     534:	90 93 7a 01 	sts	0x017A, r25
     538:	80 93 79 01 	sts	0x0179, r24
    		//i_war_cof = (*wskf_int[3])();
    			
    			if( i_war_cof == 2)
     53c:	80 91 79 01 	lds	r24, 0x0179
     540:	90 91 7a 01 	lds	r25, 0x017A
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	31 f4       	brne	.+12     	; 0x556 <Pobierz_Wartosci+0x60>
    			{
    				i_war_wy = 1;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	90 93 87 01 	sts	0x0187, r25
     552:	80 93 86 01 	sts	0x0186, r24
		lcd_puts("I rozruchu:\n");
		lcd_puts("Ir = ");
		
		lcd_command(LCD_DISP_ON_CURSOR);

		while(!i_war_cof)	
     556:	80 91 79 01 	lds	r24, 0x0179
     55a:	90 91 7a 01 	lds	r25, 0x017A
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	39 f3       	breq	.-50     	; 0x530 <Pobierz_Wartosci+0x3a>
    				i_war_wy = 1;
    			}
    		
		}
		
		i_war_cof = 0;
     562:	10 92 7a 01 	sts	0x017A, r1
     566:	10 92 79 01 	sts	0x0179, r1
		
		if(ui_liczba_w > 20 && i_war_wy == 1)
     56a:	80 91 66 01 	lds	r24, 0x0166
     56e:	90 91 67 01 	lds	r25, 0x0167
     572:	85 31       	cpi	r24, 0x15	; 21
     574:	91 05       	cpc	r25, r1
     576:	08 f4       	brcc	.+2      	; 0x57a <Pobierz_Wartosci+0x84>
     578:	88 c0       	rjmp	.+272    	; 0x68a <Pobierz_Wartosci+0x194>
     57a:	80 91 86 01 	lds	r24, 0x0186
     57e:	90 91 87 01 	lds	r25, 0x0187
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	91 05       	cpc	r25, r1
     586:	09 f0       	breq	.+2      	; 0x58a <Pobierz_Wartosci+0x94>
     588:	80 c0       	rjmp	.+256    	; 0x68a <Pobierz_Wartosci+0x194>
		{
			lcd_clrscr();
     58a:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
			lcd_puts(" Za duzy prad:\n");
     58e:	8b eb       	ldi	r24, 0xBB	; 187
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			lcd_puts("  (Max 20 A)");
     596:	8b ec       	ldi	r24, 0xCB	; 203
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e4       	ldi	r25, 0x40	; 64
     5a2:	ac e1       	ldi	r26, 0x1C	; 28
     5a4:	b5 e4       	ldi	r27, 0x45	; 69
     5a6:	8f a3       	std	Y+39, r24	; 0x27
     5a8:	98 a7       	std	Y+40, r25	; 0x28
     5aa:	a9 a7       	std	Y+41, r26	; 0x29
     5ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	4a ef       	ldi	r20, 0xFA	; 250
     5b4:	54 e4       	ldi	r21, 0x44	; 68
     5b6:	6f a1       	ldd	r22, Y+39	; 0x27
     5b8:	78 a5       	ldd	r23, Y+40	; 0x28
     5ba:	89 a5       	ldd	r24, Y+41	; 0x29
     5bc:	9a a5       	ldd	r25, Y+42	; 0x2a
     5be:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	8b a3       	std	Y+35, r24	; 0x23
     5c8:	9c a3       	std	Y+36, r25	; 0x24
     5ca:	ad a3       	std	Y+37, r26	; 0x25
     5cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e8       	ldi	r20, 0x80	; 128
     5d4:	5f e3       	ldi	r21, 0x3F	; 63
     5d6:	6b a1       	ldd	r22, Y+35	; 0x23
     5d8:	7c a1       	ldd	r23, Y+36	; 0x24
     5da:	8d a1       	ldd	r24, Y+37	; 0x25
     5dc:	9e a1       	ldd	r25, Y+38	; 0x26
     5de:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	2c f4       	brge	.+10     	; 0x5f0 <Pobierz_Wartosci+0xfa>
		__ticks = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	9a a3       	std	Y+34, r25	; 0x22
     5ec:	89 a3       	std	Y+33, r24	; 0x21
     5ee:	3f c0       	rjmp	.+126    	; 0x66e <Pobierz_Wartosci+0x178>
	else if (__tmp > 65535)
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	3f ef       	ldi	r19, 0xFF	; 255
     5f4:	4f e7       	ldi	r20, 0x7F	; 127
     5f6:	57 e4       	ldi	r21, 0x47	; 71
     5f8:	6b a1       	ldd	r22, Y+35	; 0x23
     5fa:	7c a1       	ldd	r23, Y+36	; 0x24
     5fc:	8d a1       	ldd	r24, Y+37	; 0x25
     5fe:	9e a1       	ldd	r25, Y+38	; 0x26
     600:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     604:	18 16       	cp	r1, r24
     606:	4c f5       	brge	.+82     	; 0x65a <Pobierz_Wartosci+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	6f a1       	ldd	r22, Y+39	; 0x27
     612:	78 a5       	ldd	r23, Y+40	; 0x28
     614:	89 a5       	ldd	r24, Y+41	; 0x29
     616:	9a a5       	ldd	r25, Y+42	; 0x2a
     618:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	9a a3       	std	Y+34, r25	; 0x22
     62e:	89 a3       	std	Y+33, r24	; 0x21
     630:	0f c0       	rjmp	.+30     	; 0x650 <Pobierz_Wartosci+0x15a>
     632:	88 ec       	ldi	r24, 0xC8	; 200
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	98 a3       	std	Y+32, r25	; 0x20
     638:	8f 8f       	std	Y+31, r24	; 0x1f
     63a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     63c:	98 a1       	ldd	r25, Y+32	; 0x20
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <Pobierz_Wartosci+0x148>
     642:	98 a3       	std	Y+32, r25	; 0x20
     644:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     646:	89 a1       	ldd	r24, Y+33	; 0x21
     648:	9a a1       	ldd	r25, Y+34	; 0x22
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	9a a3       	std	Y+34, r25	; 0x22
     64e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     650:	89 a1       	ldd	r24, Y+33	; 0x21
     652:	9a a1       	ldd	r25, Y+34	; 0x22
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	69 f7       	brne	.-38     	; 0x632 <Pobierz_Wartosci+0x13c>
     658:	14 c0       	rjmp	.+40     	; 0x682 <Pobierz_Wartosci+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     65a:	6b a1       	ldd	r22, Y+35	; 0x23
     65c:	7c a1       	ldd	r23, Y+36	; 0x24
     65e:	8d a1       	ldd	r24, Y+37	; 0x25
     660:	9e a1       	ldd	r25, Y+38	; 0x26
     662:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	9a a3       	std	Y+34, r25	; 0x22
     66c:	89 a3       	std	Y+33, r24	; 0x21
     66e:	89 a1       	ldd	r24, Y+33	; 0x21
     670:	9a a1       	ldd	r25, Y+34	; 0x22
     672:	9e 8f       	std	Y+30, r25	; 0x1e
     674:	8d 8f       	std	Y+29, r24	; 0x1d
     676:	8d 8d       	ldd	r24, Y+29	; 0x1d
     678:	9e 8d       	ldd	r25, Y+30	; 0x1e
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <Pobierz_Wartosci+0x184>
     67e:	9e 8f       	std	Y+30, r25	; 0x1e
     680:	8d 8f       	std	Y+29, r24	; 0x1d
			
			_delay_ms(2500);
			
			i_war_wy = 0;
     682:	10 92 87 01 	sts	0x0187, r1
     686:	10 92 86 01 	sts	0x0186, r1
		}
		ui_Ir_ogr = ui_liczba_w;
     68a:	80 91 66 01 	lds	r24, 0x0166
     68e:	90 91 67 01 	lds	r25, 0x0167
     692:	90 93 c4 01 	sts	0x01C4, r25
     696:	80 93 c3 01 	sts	0x01C3, r24
		ui_liczba_w = 0;
     69a:	10 92 67 01 	sts	0x0167, r1
     69e:	10 92 66 01 	sts	0x0166, r1
	
	i_war_wy = 0;
//	i_war_cof = 0;


	while(!i_war_wy)
     6a2:	80 91 86 01 	lds	r24, 0x0186
     6a6:	90 91 87 01 	lds	r25, 0x0187
     6aa:	00 97       	sbiw	r24, 0x00	; 0
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <Pobierz_Wartosci+0x1ba>
     6ae:	32 cf       	rjmp	.-412    	; 0x514 <Pobierz_Wartosci+0x1e>
		ui_Ir_ogr = ui_liczba_w;
		ui_liczba_w = 0;
		
	}
	
		i_war_wy=0;
     6b0:	10 92 87 01 	sts	0x0187, r1
     6b4:	10 92 86 01 	sts	0x0186, r1
     6b8:	c9 c0       	rjmp	.+402    	; 0x84c <Pobierz_Wartosci+0x356>
		while(!i_war_wy)
	{	
		lcd_clrscr();
     6ba:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
	
		lcd_puts("I hamowania:\n");
     6be:	88 ed       	ldi	r24, 0xD8	; 216
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		lcd_puts("Ih = ");
     6c6:	86 ee       	ldi	r24, 0xE6	; 230
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		lcd_command(LCD_DISP_ON_CURSOR);
     6ce:	8e e0       	ldi	r24, 0x0E	; 14
     6d0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
     6d4:	13 c0       	rjmp	.+38     	; 0x6fc <Pobierz_Wartosci+0x206>
	
		while(!i_war_cof)
		{
				i_war_cof = Klawiatura();
     6d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Klawiatura>
     6da:	90 93 7a 01 	sts	0x017A, r25
     6de:	80 93 79 01 	sts	0x0179, r24
		//		i_war_cof = (*wskf_int[3])();
				
				if( i_war_cof == 2)
     6e2:	80 91 79 01 	lds	r24, 0x0179
     6e6:	90 91 7a 01 	lds	r25, 0x017A
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	91 05       	cpc	r25, r1
     6ee:	31 f4       	brne	.+12     	; 0x6fc <Pobierz_Wartosci+0x206>
    			{
    				i_war_wy = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	90 93 87 01 	sts	0x0187, r25
     6f8:	80 93 86 01 	sts	0x0186, r24
	
		lcd_puts("I hamowania:\n");
		lcd_puts("Ih = ");
		lcd_command(LCD_DISP_ON_CURSOR);
	
		while(!i_war_cof)
     6fc:	80 91 79 01 	lds	r24, 0x0179
     700:	90 91 7a 01 	lds	r25, 0x017A
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	39 f3       	breq	.-50     	; 0x6d6 <Pobierz_Wartosci+0x1e0>
				if( i_war_cof == 2)
    			{
    				i_war_wy = 1;
    			}
		}
		i_war_cof = 0;
     708:	10 92 7a 01 	sts	0x017A, r1
     70c:	10 92 79 01 	sts	0x0179, r1
		
		if(ui_liczba_w > 17 && i_war_wy == 1)
     710:	80 91 66 01 	lds	r24, 0x0166
     714:	90 91 67 01 	lds	r25, 0x0167
     718:	82 31       	cpi	r24, 0x12	; 18
     71a:	91 05       	cpc	r25, r1
     71c:	08 f4       	brcc	.+2      	; 0x720 <Pobierz_Wartosci+0x22a>
     71e:	88 c0       	rjmp	.+272    	; 0x830 <Pobierz_Wartosci+0x33a>
     720:	80 91 86 01 	lds	r24, 0x0186
     724:	90 91 87 01 	lds	r25, 0x0187
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	09 f0       	breq	.+2      	; 0x730 <Pobierz_Wartosci+0x23a>
     72e:	80 c0       	rjmp	.+256    	; 0x830 <Pobierz_Wartosci+0x33a>
		{
			lcd_clrscr();
     730:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
			lcd_puts(" Za duzy prad:\n");
     734:	8b eb       	ldi	r24, 0xBB	; 187
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			lcd_puts("  (Max 17 A)");
     73c:	8c ee       	ldi	r24, 0xEC	; 236
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e4       	ldi	r25, 0x40	; 64
     748:	ac e1       	ldi	r26, 0x1C	; 28
     74a:	b5 e4       	ldi	r27, 0x45	; 69
     74c:	89 8f       	std	Y+25, r24	; 0x19
     74e:	9a 8f       	std	Y+26, r25	; 0x1a
     750:	ab 8f       	std	Y+27, r26	; 0x1b
     752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	4a ef       	ldi	r20, 0xFA	; 250
     75a:	54 e4       	ldi	r21, 0x44	; 68
     75c:	69 8d       	ldd	r22, Y+25	; 0x19
     75e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     760:	8b 8d       	ldd	r24, Y+27	; 0x1b
     762:	9c 8d       	ldd	r25, Y+28	; 0x1c
     764:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	8d 8b       	std	Y+21, r24	; 0x15
     76e:	9e 8b       	std	Y+22, r25	; 0x16
     770:	af 8b       	std	Y+23, r26	; 0x17
     772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5f e3       	ldi	r21, 0x3F	; 63
     77c:	6d 89       	ldd	r22, Y+21	; 0x15
     77e:	7e 89       	ldd	r23, Y+22	; 0x16
     780:	8f 89       	ldd	r24, Y+23	; 0x17
     782:	98 8d       	ldd	r25, Y+24	; 0x18
     784:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
     788:	88 23       	and	r24, r24
     78a:	2c f4       	brge	.+10     	; 0x796 <Pobierz_Wartosci+0x2a0>
		__ticks = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9c 8b       	std	Y+20, r25	; 0x14
     792:	8b 8b       	std	Y+19, r24	; 0x13
     794:	3f c0       	rjmp	.+126    	; 0x814 <Pobierz_Wartosci+0x31e>
	else if (__tmp > 65535)
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	3f ef       	ldi	r19, 0xFF	; 255
     79a:	4f e7       	ldi	r20, 0x7F	; 127
     79c:	57 e4       	ldi	r21, 0x47	; 71
     79e:	6d 89       	ldd	r22, Y+21	; 0x15
     7a0:	7e 89       	ldd	r23, Y+22	; 0x16
     7a2:	8f 89       	ldd	r24, Y+23	; 0x17
     7a4:	98 8d       	ldd	r25, Y+24	; 0x18
     7a6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	4c f5       	brge	.+82     	; 0x800 <Pobierz_Wartosci+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e2       	ldi	r20, 0x20	; 32
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	69 8d       	ldd	r22, Y+25	; 0x19
     7b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7be:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	9c 8b       	std	Y+20, r25	; 0x14
     7d4:	8b 8b       	std	Y+19, r24	; 0x13
     7d6:	0f c0       	rjmp	.+30     	; 0x7f6 <Pobierz_Wartosci+0x300>
     7d8:	88 ec       	ldi	r24, 0xC8	; 200
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9a 8b       	std	Y+18, r25	; 0x12
     7de:	89 8b       	std	Y+17, r24	; 0x11
     7e0:	89 89       	ldd	r24, Y+17	; 0x11
     7e2:	9a 89       	ldd	r25, Y+18	; 0x12
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <Pobierz_Wartosci+0x2ee>
     7e8:	9a 8b       	std	Y+18, r25	; 0x12
     7ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ec:	8b 89       	ldd	r24, Y+19	; 0x13
     7ee:	9c 89       	ldd	r25, Y+20	; 0x14
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	9c 8b       	std	Y+20, r25	; 0x14
     7f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f6:	8b 89       	ldd	r24, Y+19	; 0x13
     7f8:	9c 89       	ldd	r25, Y+20	; 0x14
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	69 f7       	brne	.-38     	; 0x7d8 <Pobierz_Wartosci+0x2e2>
     7fe:	14 c0       	rjmp	.+40     	; 0x828 <Pobierz_Wartosci+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     800:	6d 89       	ldd	r22, Y+21	; 0x15
     802:	7e 89       	ldd	r23, Y+22	; 0x16
     804:	8f 89       	ldd	r24, Y+23	; 0x17
     806:	98 8d       	ldd	r25, Y+24	; 0x18
     808:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	9c 8b       	std	Y+20, r25	; 0x14
     812:	8b 8b       	std	Y+19, r24	; 0x13
     814:	8b 89       	ldd	r24, Y+19	; 0x13
     816:	9c 89       	ldd	r25, Y+20	; 0x14
     818:	98 8b       	std	Y+16, r25	; 0x10
     81a:	8f 87       	std	Y+15, r24	; 0x0f
     81c:	8f 85       	ldd	r24, Y+15	; 0x0f
     81e:	98 89       	ldd	r25, Y+16	; 0x10
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <Pobierz_Wartosci+0x32a>
     824:	98 8b       	std	Y+16, r25	; 0x10
     826:	8f 87       	std	Y+15, r24	; 0x0f
			
			_delay_ms(2500);
						
			i_war_wy = 0;
     828:	10 92 87 01 	sts	0x0187, r1
     82c:	10 92 86 01 	sts	0x0186, r1
		}
		lcd_clrscr();
     830:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
		ui_Ih_ogr = ui_liczba_w;
     834:	80 91 66 01 	lds	r24, 0x0166
     838:	90 91 67 01 	lds	r25, 0x0167
     83c:	90 93 a0 01 	sts	0x01A0, r25
     840:	80 93 9f 01 	sts	0x019F, r24
		ui_liczba_w = 0;
     844:	10 92 67 01 	sts	0x0167, r1
     848:	10 92 66 01 	sts	0x0166, r1
		ui_liczba_w = 0;
		
	}
	
		i_war_wy=0;
		while(!i_war_wy)
     84c:	80 91 86 01 	lds	r24, 0x0186
     850:	90 91 87 01 	lds	r25, 0x0187
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	09 f4       	brne	.+2      	; 0x85a <Pobierz_Wartosci+0x364>
     858:	30 cf       	rjmp	.-416    	; 0x6ba <Pobierz_Wartosci+0x1c4>
		lcd_clrscr();
		ui_Ih_ogr = ui_liczba_w;
		ui_liczba_w = 0;
   }

	lcd_command(LCD_DISP_ON);
     85a:	8c e0       	ldi	r24, 0x0C	; 12
     85c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
	lcd_clrscr();
     860:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
	
	utoa(ui_Ir_ogr, c_buffer_n, 10);
     864:	20 91 c3 01 	lds	r18, 0x01C3
     868:	30 91 c4 01 	lds	r19, 0x01C4
     86c:	80 e9       	ldi	r24, 0x90	; 144
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	4a e0       	ldi	r20, 0x0A	; 10
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	bc 01       	movw	r22, r24
     876:	c9 01       	movw	r24, r18
     878:	0e 94 19 13 	call	0x2632	; 0x2632 <utoa>
	lcd_puts("Ir = ");
     87c:	85 eb       	ldi	r24, 0xB5	; 181
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	lcd_puts(c_buffer_n);
     884:	80 e9       	ldi	r24, 0x90	; 144
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	lcd_puts(" A\n");
     88c:	89 ef       	ldi	r24, 0xF9	; 249
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	
	utoa(ui_Ih_ogr, c_buffer_n, 10);
     894:	20 91 9f 01 	lds	r18, 0x019F
     898:	30 91 a0 01 	lds	r19, 0x01A0
     89c:	80 e9       	ldi	r24, 0x90	; 144
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	4a e0       	ldi	r20, 0x0A	; 10
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	bc 01       	movw	r22, r24
     8a6:	c9 01       	movw	r24, r18
     8a8:	0e 94 19 13 	call	0x2632	; 0x2632 <utoa>
	lcd_puts("Ih = ");
     8ac:	86 ee       	ldi	r24, 0xE6	; 230
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	lcd_puts(c_buffer_n);
     8b4:	80 e9       	ldi	r24, 0x90	; 144
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	lcd_puts(" A");
     8bc:	8d ef       	ldi	r24, 0xFD	; 253
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e4       	ldi	r25, 0x40	; 64
     8c8:	ac e1       	ldi	r26, 0x1C	; 28
     8ca:	b5 e4       	ldi	r27, 0x45	; 69
     8cc:	8b 87       	std	Y+11, r24	; 0x0b
     8ce:	9c 87       	std	Y+12, r25	; 0x0c
     8d0:	ad 87       	std	Y+13, r26	; 0x0d
     8d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4a ef       	ldi	r20, 0xFA	; 250
     8da:	54 e4       	ldi	r21, 0x44	; 68
     8dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     8de:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	8f 83       	std	Y+7, r24	; 0x07
     8ee:	98 87       	std	Y+8, r25	; 0x08
     8f0:	a9 87       	std	Y+9, r26	; 0x09
     8f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f e3       	ldi	r21, 0x3F	; 63
     8fc:	6f 81       	ldd	r22, Y+7	; 0x07
     8fe:	78 85       	ldd	r23, Y+8	; 0x08
     900:	89 85       	ldd	r24, Y+9	; 0x09
     902:	9a 85       	ldd	r25, Y+10	; 0x0a
     904:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
     908:	88 23       	and	r24, r24
     90a:	2c f4       	brge	.+10     	; 0x916 <Pobierz_Wartosci+0x420>
		__ticks = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	9e 83       	std	Y+6, r25	; 0x06
     912:	8d 83       	std	Y+5, r24	; 0x05
     914:	3f c0       	rjmp	.+126    	; 0x994 <Pobierz_Wartosci+0x49e>
	else if (__tmp > 65535)
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	3f ef       	ldi	r19, 0xFF	; 255
     91a:	4f e7       	ldi	r20, 0x7F	; 127
     91c:	57 e4       	ldi	r21, 0x47	; 71
     91e:	6f 81       	ldd	r22, Y+7	; 0x07
     920:	78 85       	ldd	r23, Y+8	; 0x08
     922:	89 85       	ldd	r24, Y+9	; 0x09
     924:	9a 85       	ldd	r25, Y+10	; 0x0a
     926:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     92a:	18 16       	cp	r1, r24
     92c:	4c f5       	brge	.+82     	; 0x980 <Pobierz_Wartosci+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e2       	ldi	r20, 0x20	; 32
     934:	51 e4       	ldi	r21, 0x41	; 65
     936:	6b 85       	ldd	r22, Y+11	; 0x0b
     938:	7c 85       	ldd	r23, Y+12	; 0x0c
     93a:	8d 85       	ldd	r24, Y+13	; 0x0d
     93c:	9e 85       	ldd	r25, Y+14	; 0x0e
     93e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	bc 01       	movw	r22, r24
     948:	cd 01       	movw	r24, r26
     94a:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	9e 83       	std	Y+6, r25	; 0x06
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	0f c0       	rjmp	.+30     	; 0x976 <Pobierz_Wartosci+0x480>
     958:	88 ec       	ldi	r24, 0xC8	; 200
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <Pobierz_Wartosci+0x46e>
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	9e 83       	std	Y+6, r25	; 0x06
     974:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	9e 81       	ldd	r25, Y+6	; 0x06
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	69 f7       	brne	.-38     	; 0x958 <Pobierz_Wartosci+0x462>
     97e:	14 c0       	rjmp	.+40     	; 0x9a8 <Pobierz_Wartosci+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     980:	6f 81       	ldd	r22, Y+7	; 0x07
     982:	78 85       	ldd	r23, Y+8	; 0x08
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	9a 85       	ldd	r25, Y+10	; 0x0a
     988:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	9e 83       	std	Y+6, r25	; 0x06
     992:	8d 83       	std	Y+5, r24	; 0x05
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	9e 81       	ldd	r25, Y+6	; 0x06
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <Pobierz_Wartosci+0x4aa>
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(2500);
}
     9a8:	aa 96       	adiw	r28, 0x2a	; 42
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <Klawiatura>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Klawiatura(void)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <Klawiatura+0x6>
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
  	uc_l_obiegow++;              						// Licznik obiegów pêtli
     9c4:	80 91 74 01 	lds	r24, 0x0174
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 74 01 	sts	0x0174, r24

	if(uc_l_obiegow == 20)
     9ce:	80 91 74 01 	lds	r24, 0x0174
     9d2:	84 31       	cpi	r24, 0x14	; 20
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <Klawiatura+0x1e>
     9d6:	42 c0       	rjmp	.+132    	; 0xa5c <Klawiatura+0xa2>
    {
		uc_kolumna++;            						// Licznik kolumny
     9d8:	80 91 6b 01 	lds	r24, 0x016B
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 6b 01 	sts	0x016B, r24
		uc_l_obiegow = 0;
     9e2:	10 92 74 01 	sts	0x0174, r1
		if(uc_kolumna == 4)            				// Przepe³nienie licznika obiegów pêtli
     9e6:	80 91 6b 01 	lds	r24, 0x016B
     9ea:	84 30       	cpi	r24, 0x04	; 4
     9ec:	f1 f4       	brne	.+60     	; 0xa2a <Klawiatura+0x70>
	    {
	      uc_kolumna = 0;
     9ee:	10 92 6b 01 	sts	0x016B, r1
	      uc_l_spowalniajacy++;
     9f2:	80 91 81 01 	lds	r24, 0x0181
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 81 01 	sts	0x0181, r24
	
			if(uc_l_spowalniajacy == 5) 				// Licznik spowalniaj¹cy
     9fc:	80 91 81 01 	lds	r24, 0x0181
     a00:	85 30       	cpi	r24, 0x05	; 5
     a02:	99 f4       	brne	.+38     	; 0xa2a <Klawiatura+0x70>
	        {
	          SETBIT(uc_klawisze, KLAWISZ);		// Flaga naciniêcia klawisza
     a04:	80 91 60 00 	lds	r24, 0x0060
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	80 93 60 00 	sts	0x0060, r24
	          SETBIT(uc_klawisze, KLAWISZ_N);		// Flaga naciniêcia klawisza numerycznego
     a0e:	80 91 60 00 	lds	r24, 0x0060
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	80 93 60 00 	sts	0x0060, r24
	          SETBIT(uc_klawisze, KLAWISZ_F);		// Flaga naciniêcia klawisza funkcyjnego
     a18:	80 91 60 00 	lds	r24, 0x0060
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 60 00 	sts	0x0060, r24
	          uc_nr_przycisku = 0;
     a22:	10 92 6a 01 	sts	0x016A, r1
	          uc_l_spowalniajacy = 0;
     a26:	10 92 81 01 	sts	0x0181, r1
	        }
	    }
	
		PORTB = 0xFF;
     a2a:	e8 e3       	ldi	r30, 0x38	; 56
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	80 83       	st	Z, r24
		PORTB &= ~_BV(uc_kolumna);
     a32:	a8 e3       	ldi	r26, 0x38	; 56
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e8 e3       	ldi	r30, 0x38	; 56
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	48 2f       	mov	r20, r24
     a3e:	80 91 6b 01 	lds	r24, 0x016B
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	02 2e       	mov	r0, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <Klawiatura+0x98>
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <Klawiatura+0x94>
     a56:	80 95       	com	r24
     a58:	84 23       	and	r24, r20
     a5a:	8c 93       	st	X, r24
    }
	
	if ((PINB >> 4) != 15)								// Wykrycie wciniêcia klawisza
     a5c:	e6 e3       	ldi	r30, 0x36	; 54
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	82 95       	swap	r24
     a64:	8f 70       	andi	r24, 0x0F	; 15
     a66:	8f 30       	cpi	r24, 0x0F	; 15
     a68:	39 f0       	breq	.+14     	; 0xa78 <Klawiatura+0xbe>
    {		
		CLEARBIT(uc_klawisze, KLAWISZ);				// Ustawienie flagi naciniêcia klawisza
     a6a:	80 91 60 00 	lds	r24, 0x0060
     a6e:	8b 7f       	andi	r24, 0xFB	; 251
     a70:	80 93 60 00 	sts	0x0060, r24
		uc_l_spowalniajacy = 0;
     a74:	10 92 81 01 	sts	0x0181, r1
    }
	if((uc_kolumna == 0))								// Wykrycie klawisza 1-szej kolumny
     a78:	80 91 6b 01 	lds	r24, 0x016B
     a7c:	88 23       	and	r24, r24
     a7e:	41 f5       	brne	.+80     	; 0xad0 <Klawiatura+0x116>
    {
      if((PINB >> 4) == 14)
     a80:	e6 e3       	ldi	r30, 0x36	; 54
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	82 95       	swap	r24
     a88:	8f 70       	andi	r24, 0x0F	; 15
     a8a:	8e 30       	cpi	r24, 0x0E	; 14
     a8c:	19 f4       	brne	.+6      	; 0xa94 <Klawiatura+0xda>
        {
				uc_nr_przycisku = 1;				     	// Wciniêto przycisk "1"
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 13)	
     a94:	e6 e3       	ldi	r30, 0x36	; 54
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	82 95       	swap	r24
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	8d 30       	cpi	r24, 0x0D	; 13
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <Klawiatura+0xee>
        {
				uc_nr_przycisku = 4;						// Wciniêto przycisk "4"
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 11)
     aa8:	e6 e3       	ldi	r30, 0x36	; 54
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	82 95       	swap	r24
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	8b 30       	cpi	r24, 0x0B	; 11
     ab4:	19 f4       	brne	.+6      	; 0xabc <Klawiatura+0x102>
        {
				uc_nr_przycisku = 7;						// Wciniêto przycisk "7"
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 7)
     abc:	e6 e3       	ldi	r30, 0x36	; 54
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	82 95       	swap	r24
     ac4:	8f 70       	andi	r24, 0x0F	; 15
     ac6:	87 30       	cpi	r24, 0x07	; 7
     ac8:	19 f4       	brne	.+6      	; 0xad0 <Klawiatura+0x116>
        {
			uc_nr_przycisku = 15;						// Wciniêto przycisk "15" (*)
     aca:	8f e0       	ldi	r24, 0x0F	; 15
     acc:	80 93 6a 01 	sts	0x016A, r24
        }
    }
  if((uc_kolumna == 1))									// Wykrycie klawisza 2-giej kolumny
     ad0:	80 91 6b 01 	lds	r24, 0x016B
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	39 f5       	brne	.+78     	; 0xb26 <Klawiatura+0x16c>
    {
      if((PINB >> 4) == 14)
     ad8:	e6 e3       	ldi	r30, 0x36	; 54
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	82 95       	swap	r24
     ae0:	8f 70       	andi	r24, 0x0F	; 15
     ae2:	8e 30       	cpi	r24, 0x0E	; 14
     ae4:	19 f4       	brne	.+6      	; 0xaec <Klawiatura+0x132>
        {
				uc_nr_przycisku = 2;						// Wciniêto przycisk "2"
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 13)
     aec:	e6 e3       	ldi	r30, 0x36	; 54
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	82 95       	swap	r24
     af4:	8f 70       	andi	r24, 0x0F	; 15
     af6:	8d 30       	cpi	r24, 0x0D	; 13
     af8:	19 f4       	brne	.+6      	; 0xb00 <Klawiatura+0x146>
        {
				uc_nr_przycisku = 5;						// Wciniêto przycisk "5"
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 11)
     b00:	e6 e3       	ldi	r30, 0x36	; 54
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	82 95       	swap	r24
     b08:	8f 70       	andi	r24, 0x0F	; 15
     b0a:	8b 30       	cpi	r24, 0x0B	; 11
     b0c:	19 f4       	brne	.+6      	; 0xb14 <Klawiatura+0x15a>
        {
				uc_nr_przycisku = 8;						// Wciniêto przycisk "8"
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	80 93 6a 01 	sts	0x016A, r24
		  }
      if((PINB >> 4) == 7)
     b14:	e6 e3       	ldi	r30, 0x36	; 54
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	82 95       	swap	r24
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	87 30       	cpi	r24, 0x07	; 7
     b20:	11 f4       	brne	.+4      	; 0xb26 <Klawiatura+0x16c>
        {
				uc_nr_przycisku = 0;						// Wciniêto przycisk "0"
     b22:	10 92 6a 01 	sts	0x016A, r1
        }
    }
  if((uc_kolumna == 2))									// Wykrycie klawisza 3-ciej kolumny
     b26:	80 91 6b 01 	lds	r24, 0x016B
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	41 f5       	brne	.+80     	; 0xb7e <Klawiatura+0x1c4>
    {
      if((PINB >> 4) == 14)
     b2e:	e6 e3       	ldi	r30, 0x36	; 54
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	82 95       	swap	r24
     b36:	8f 70       	andi	r24, 0x0F	; 15
     b38:	8e 30       	cpi	r24, 0x0E	; 14
     b3a:	19 f4       	brne	.+6      	; 0xb42 <Klawiatura+0x188>
        {
				uc_nr_przycisku = 3;						// Wciniêto przycisk "3"
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 13)
     b42:	e6 e3       	ldi	r30, 0x36	; 54
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	82 95       	swap	r24
     b4a:	8f 70       	andi	r24, 0x0F	; 15
     b4c:	8d 30       	cpi	r24, 0x0D	; 13
     b4e:	19 f4       	brne	.+6      	; 0xb56 <Klawiatura+0x19c>
        {
				uc_nr_przycisku = 6;						// Wciniêto przycisk "6"
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 11)
     b56:	e6 e3       	ldi	r30, 0x36	; 54
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	82 95       	swap	r24
     b5e:	8f 70       	andi	r24, 0x0F	; 15
     b60:	8b 30       	cpi	r24, 0x0B	; 11
     b62:	19 f4       	brne	.+6      	; 0xb6a <Klawiatura+0x1b0>
        {
				uc_nr_przycisku = 9; 			     	// Wciniêto przycisk "9"
     b64:	89 e0       	ldi	r24, 0x09	; 9
     b66:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 7)
     b6a:	e6 e3       	ldi	r30, 0x36	; 54
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	82 95       	swap	r24
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	87 30       	cpi	r24, 0x07	; 7
     b76:	19 f4       	brne	.+6      	; 0xb7e <Klawiatura+0x1c4>
        {
				uc_nr_przycisku = 16;					// Wciniêto przycisk "16" (#)
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	80 93 6a 01 	sts	0x016A, r24
        }
    }	
  if((uc_kolumna == 3))									// Wykrycie klawisza 4-tej kolumny
     b7e:	80 91 6b 01 	lds	r24, 0x016B
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	41 f5       	brne	.+80     	; 0xbd6 <Klawiatura+0x21c>
    {
      if((PINB >> 4) == 14)
     b86:	e6 e3       	ldi	r30, 0x36	; 54
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 95       	swap	r24
     b8e:	8f 70       	andi	r24, 0x0F	; 15
     b90:	8e 30       	cpi	r24, 0x0E	; 14
     b92:	19 f4       	brne	.+6      	; 0xb9a <Klawiatura+0x1e0>
        {
				uc_nr_przycisku = 11;					// Wciniêto przycisk "11" (A)
     b94:	8b e0       	ldi	r24, 0x0B	; 11
     b96:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 13)
     b9a:	e6 e3       	ldi	r30, 0x36	; 54
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	82 95       	swap	r24
     ba2:	8f 70       	andi	r24, 0x0F	; 15
     ba4:	8d 30       	cpi	r24, 0x0D	; 13
     ba6:	19 f4       	brne	.+6      	; 0xbae <Klawiatura+0x1f4>
        {
				uc_nr_przycisku = 12;					// Wciniêto przycisk "12" (B)
     ba8:	8c e0       	ldi	r24, 0x0C	; 12
     baa:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 11)
     bae:	e6 e3       	ldi	r30, 0x36	; 54
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	82 95       	swap	r24
     bb6:	8f 70       	andi	r24, 0x0F	; 15
     bb8:	8b 30       	cpi	r24, 0x0B	; 11
     bba:	19 f4       	brne	.+6      	; 0xbc2 <Klawiatura+0x208>
        {
				uc_nr_przycisku = 13;					// Wciniêto przycisk "13" (C)
     bbc:	8d e0       	ldi	r24, 0x0D	; 13
     bbe:	80 93 6a 01 	sts	0x016A, r24
        }
      if((PINB >> 4) == 7)
     bc2:	e6 e3       	ldi	r30, 0x36	; 54
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 95       	swap	r24
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	87 30       	cpi	r24, 0x07	; 7
     bce:	19 f4       	brne	.+6      	; 0xbd6 <Klawiatura+0x21c>
        {
				uc_nr_przycisku = 14;					// Wciniêto przycisk "14" (D)
     bd0:	8e e0       	ldi	r24, 0x0E	; 14
     bd2:	80 93 6a 01 	sts	0x016A, r24
        }
    }
  		
  if((uc_nr_przycisku == 11) && (CHECKBIT(uc_klawisze, KLAWISZ_F)))		// Zatwierdzenie wpisanej wrtoci - Przycisk (A)
     bd6:	80 91 6a 01 	lds	r24, 0x016A
     bda:	8b 30       	cpi	r24, 0x0B	; 11
     bdc:	91 f4       	brne	.+36     	; 0xc02 <Klawiatura+0x248>
     bde:	80 91 60 00 	lds	r24, 0x0060
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	81 70       	andi	r24, 0x01	; 1
     be8:	90 70       	andi	r25, 0x00	; 0
     bea:	88 23       	and	r24, r24
     bec:	51 f0       	breq	.+20     	; 0xc02 <Klawiatura+0x248>
  {
		CLEARBIT(uc_klawisze, KLAWISZ_F);       									// Ustawienie flagi wybrania klawisza funkcyjnego
     bee:	80 91 60 00 	lds	r24, 0x0060
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	80 93 60 00 	sts	0x0060, r24
		return 2;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	59 c0       	rjmp	.+178    	; 0xcb4 <Klawiatura+0x2fa>
  }
  if((uc_nr_przycisku == 13) && (CHECKBIT(uc_klawisze, KLAWISZ_F))) 		// Powtórzenie wpisu - Przycisk (C)
     c02:	80 91 6a 01 	lds	r24, 0x016A
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	91 f4       	brne	.+36     	; 0xc2e <Klawiatura+0x274>
     c0a:	80 91 60 00 	lds	r24, 0x0060
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	90 70       	andi	r25, 0x00	; 0
     c16:	88 23       	and	r24, r24
     c18:	51 f0       	breq	.+20     	; 0xc2e <Klawiatura+0x274>
  {
		CLEARBIT(uc_klawisze, KLAWISZ_F);											// Ustawienie flagi wybrania klawisza funkcyjnego
     c1a:	80 91 60 00 	lds	r24, 0x0060
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 93 60 00 	sts	0x0060, r24
		return 1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	43 c0       	rjmp	.+134    	; 0xcb4 <Klawiatura+0x2fa>
  }
  if(!(CHECKBIT(uc_klawisze, KLAWISZ)) && (CHECKBIT(uc_klawisze, KLAWISZ_N)) && (uc_nr_przycisku < 10))
     c2e:	80 91 60 00 	lds	r24, 0x0060
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	84 70       	andi	r24, 0x04	; 4
     c38:	90 70       	andi	r25, 0x00	; 0
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	c9 f5       	brne	.+114    	; 0xcb0 <Klawiatura+0x2f6>
     c3e:	80 91 60 00 	lds	r24, 0x0060
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	82 70       	andi	r24, 0x02	; 2
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	89 f1       	breq	.+98     	; 0xcb0 <Klawiatura+0x2f6>
     c4e:	80 91 6a 01 	lds	r24, 0x016A
     c52:	8a 30       	cpi	r24, 0x0A	; 10
     c54:	68 f5       	brcc	.+90     	; 0xcb0 <Klawiatura+0x2f6>
  {
		utoa(uc_nr_przycisku, c_buffer_n, 10);
     c56:	80 91 6a 01 	lds	r24, 0x016A
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	80 e9       	ldi	r24, 0x90	; 144
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	4a e0       	ldi	r20, 0x0A	; 10
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	bc 01       	movw	r22, r24
     c68:	c9 01       	movw	r24, r18
     c6a:	0e 94 19 13 	call	0x2632	; 0x2632 <utoa>
		lcd_puts(c_buffer_n);
     c6e:	80 e9       	ldi	r24, 0x90	; 144
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		ui_liczba_w = ui_liczba_w * 10 + uc_nr_przycisku;						// Obliczanie wprowadzanej liczby
     c76:	80 91 66 01 	lds	r24, 0x0166
     c7a:	90 91 67 01 	lds	r25, 0x0167
     c7e:	9c 01       	movw	r18, r24
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	c9 01       	movw	r24, r18
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	28 0f       	add	r18, r24
     c90:	39 1f       	adc	r19, r25
     c92:	80 91 6a 01 	lds	r24, 0x016A
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	90 93 67 01 	sts	0x0167, r25
     ca2:	80 93 66 01 	sts	0x0166, r24
		CLEARBIT(uc_klawisze, KLAWISZ_N);											// Ustawienie flagi zadzia³ania klawisza numerycznego
     ca6:	80 91 60 00 	lds	r24, 0x0060
     caa:	8d 7f       	andi	r24, 0xFD	; 253
     cac:	80 93 60 00 	sts	0x0060, r24
  }

	return 0;
     cb0:	1a 82       	std	Y+2, r1	; 0x02
     cb2:	19 82       	std	Y+1, r1	; 0x01
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Przetwornik_ADC>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Przetwornik_ADC(int Kanal_ADC)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <Przetwornik_ADC+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <Przetwornik_ADC+0x8>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~_BV(MUX0) &~_BV(MUX1) &~_BV(MUX2);
     cd2:	a7 e2       	ldi	r26, 0x27	; 39
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e2       	ldi	r30, 0x27	; 39
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	88 7f       	andi	r24, 0xF8	; 248
     cde:	8c 93       	st	X, r24
		
	switch(Kanal_ADC) 									// Wybór kana³u
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	9c 83       	std	Y+4, r25	; 0x04
     ce6:	8b 83       	std	Y+3, r24	; 0x03
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	a9 f1       	breq	.+106    	; 0xd5c <Przetwornik_ADC+0x9a>
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	91 05       	cpc	r25, r1
     cfa:	5c f4       	brge	.+22     	; 0xd12 <Przetwornik_ADC+0x50>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	d9 f0       	breq	.+54     	; 0xd3c <Przetwornik_ADC+0x7a>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	91 05       	cpc	r25, r1
     d0e:	f4 f4       	brge	.+60     	; 0xd4c <Przetwornik_ADC+0x8a>
     d10:	4c c0       	rjmp	.+152    	; 0xdaa <Przetwornik_ADC+0xe8>
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	85 30       	cpi	r24, 0x05	; 5
     d18:	91 05       	cpc	r25, r1
     d1a:	81 f1       	breq	.+96     	; 0xd7c <Przetwornik_ADC+0xba>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	85 30       	cpi	r24, 0x05	; 5
     d22:	91 05       	cpc	r25, r1
     d24:	1c f1       	brlt	.+70     	; 0xd6c <Przetwornik_ADC+0xaa>
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	86 30       	cpi	r24, 0x06	; 6
     d2c:	91 05       	cpc	r25, r1
     d2e:	71 f1       	breq	.+92     	; 0xd8c <Przetwornik_ADC+0xca>
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	87 30       	cpi	r24, 0x07	; 7
     d36:	91 05       	cpc	r25, r1
     d38:	89 f1       	breq	.+98     	; 0xd9c <Przetwornik_ADC+0xda>
     d3a:	37 c0       	rjmp	.+110    	; 0xdaa <Przetwornik_ADC+0xe8>
	{
		
		case 0:
					break;
					
		case 1:  ADMUX |= _BV(MUX0);
     d3c:	a7 e2       	ldi	r26, 0x27	; 39
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e2       	ldi	r30, 0x27	; 39
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	8c 93       	st	X, r24
     d4a:	2f c0       	rjmp	.+94     	; 0xdaa <Przetwornik_ADC+0xe8>
	            break;
	
		case 2:	ADMUX |= _BV(MUX1);
     d4c:	a7 e2       	ldi	r26, 0x27	; 39
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e7 e2       	ldi	r30, 0x27	; 39
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24
     d5a:	27 c0       	rjmp	.+78     	; 0xdaa <Przetwornik_ADC+0xe8>
					break;
				
		case 3:	ADMUX |= _BV(MUX0) | _BV(MUX1);
     d5c:	a7 e2       	ldi	r26, 0x27	; 39
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e7 e2       	ldi	r30, 0x27	; 39
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	83 60       	ori	r24, 0x03	; 3
     d68:	8c 93       	st	X, r24
     d6a:	1f c0       	rjmp	.+62     	; 0xdaa <Przetwornik_ADC+0xe8>
					break;
					
		case 4:  ADMUX |= _BV(MUX2);
     d6c:	a7 e2       	ldi	r26, 0x27	; 39
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e7 e2       	ldi	r30, 0x27	; 39
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	84 60       	ori	r24, 0x04	; 4
     d78:	8c 93       	st	X, r24
     d7a:	17 c0       	rjmp	.+46     	; 0xdaa <Przetwornik_ADC+0xe8>
					break;
					
		case 5:	ADMUX |= _BV(MUX0) | _BV(MUX2);
     d7c:	a7 e2       	ldi	r26, 0x27	; 39
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e2       	ldi	r30, 0x27	; 39
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	85 60       	ori	r24, 0x05	; 5
     d88:	8c 93       	st	X, r24
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <Przetwornik_ADC+0xe8>
					break;
		
		case 6:	ADMUX |= _BV(MUX1) | _BV(MUX2);
     d8c:	a7 e2       	ldi	r26, 0x27	; 39
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e2       	ldi	r30, 0x27	; 39
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	86 60       	ori	r24, 0x06	; 6
     d98:	8c 93       	st	X, r24
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <Przetwornik_ADC+0xe8>
					break;
					
		case 7:	ADMUX |= _BV(MUX0) | _BV(MUX1) | _BV(MUX2);
     d9c:	a7 e2       	ldi	r26, 0x27	; 39
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e2       	ldi	r30, 0x27	; 39
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	87 60       	ori	r24, 0x07	; 7
     da8:	8c 93       	st	X, r24
					break;
	}
	
	ADCSRA |= _BV(ADEN);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADSC);         						// Rozpoczêcie przetwarzania
     db8:	a6 e2       	ldi	r26, 0x26	; 38
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 64       	ori	r24, 0x40	; 64
     dc4:	8c 93       	st	X, r24
	while(bit_is_set(ADCSRA,ADSC))					// Oczekiwanie na zakoñczenie przetwarzania
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	80 74       	andi	r24, 0x40	; 64
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	b9 f7       	brne	.-18     	; 0xdc6 <Przetwornik_ADC+0x104>
	{
	}

	return (ADCW);		
     dd8:	e4 e2       	ldi	r30, 0x24	; 36
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Wychylenie_Nastawnika>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Wychylenie_Nastawnika(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <Wychylenie_Nastawnika+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	int wychylenie;
	
	wychylenie = Przetwornik_ADC(1);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Przetwornik_ADC>
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
//	wychylenie = (*wskf_P_ADC)(1);
		
	if( wychylenie < 120)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	88 37       	cpi	r24, 0x78	; 120
     e0a:	91 05       	cpc	r25, r1
     e0c:	24 f4       	brge	.+8      	; 0xe16 <Wychylenie_Nastawnika+0x28>
	{
		wychylenie = 120;
     e0e:	88 e7       	ldi	r24, 0x78	; 120
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if( wychylenie > 620)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	22 e0       	ldi	r18, 0x02	; 2
     e1c:	8d 36       	cpi	r24, 0x6D	; 109
     e1e:	92 07       	cpc	r25, r18
     e20:	24 f0       	brlt	.+8      	; 0xe2a <Wychylenie_Nastawnika+0x3c>
	{
		wychylenie = 620;
     e22:	8c e6       	ldi	r24, 0x6C	; 108
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return (wychylenie - 120);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	88 57       	subi	r24, 0x78	; 120
     e30:	90 40       	sbci	r25, 0x00	; 0
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Prad_Zadany>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

float Prad_Zadany(int Iogr)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <Prad_Zadany+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
	return (Wychylenie_Nastawnika() * Iogr * 0.002);
     e4a:	0e 94 f7 06 	call	0xdee	; 0xdee <Wychylenie_Nastawnika>
     e4e:	9c 01       	movw	r18, r24
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	ac 01       	movw	r20, r24
     e56:	24 9f       	mul	r18, r20
     e58:	c0 01       	movw	r24, r0
     e5a:	25 9f       	mul	r18, r21
     e5c:	90 0d       	add	r25, r0
     e5e:	34 9f       	mul	r19, r20
     e60:	90 0d       	add	r25, r0
     e62:	11 24       	eor	r1, r1
     e64:	aa 27       	eor	r26, r26
     e66:	97 fd       	sbrc	r25, 7
     e68:	a0 95       	com	r26
     e6a:	ba 2f       	mov	r27, r26
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 43 14 	call	0x2886	; 0x2886 <__floatsisf>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	2f e6       	ldi	r18, 0x6F	; 111
     e7a:	32 e1       	ldi	r19, 0x12	; 18
     e7c:	43 e0       	ldi	r20, 0x03	; 3
     e7e:	5b e3       	ldi	r21, 0x3B	; 59
     e80:	bc 01       	movw	r22, r24
     e82:	cd 01       	movw	r24, r26
     e84:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
//return ((*wskf_int[4])() * Iogr * 0.002);
}
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <Prad_Pomierzony>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

float Prad_Pomierzony(void)
{
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	2e 97       	sbiw	r28, 0x0e	; 14
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
	int V_pom;
	float Vref, R, P_LEM;
	
	Vref = 5;
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 ea       	ldi	r26, 0xA0	; 160
     ebc:	b0 e4       	ldi	r27, 0x40	; 64
     ebe:	89 87       	std	Y+9, r24	; 0x09
     ec0:	9a 87       	std	Y+10, r25	; 0x0a
     ec2:	ab 87       	std	Y+11, r26	; 0x0b
     ec4:	bc 87       	std	Y+12, r27	; 0x0c
  	R = 300;                 			// Rezystor na wyjsciu LEMa  R = 220 Ohm
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a6 e9       	ldi	r26, 0x96	; 150
     ecc:	b3 e4       	ldi	r27, 0x43	; 67
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	af 83       	std	Y+7, r26	; 0x07
     ed4:	b8 87       	std	Y+8, r27	; 0x08
	P_LEM = 0.0005;          			// Przek³adnia LEM 1:1000;
     ed6:	8f e6       	ldi	r24, 0x6F	; 111
     ed8:	92 e1       	ldi	r25, 0x12	; 18
     eda:	a3 e0       	ldi	r26, 0x03	; 3
     edc:	ba e3       	ldi	r27, 0x3A	; 58
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	ab 83       	std	Y+3, r26	; 0x03
     ee4:	bc 83       	std	Y+4, r27	; 0x04
	
	V_pom = Przetwornik_ADC(0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Przetwornik_ADC>
     eee:	9e 87       	std	Y+14, r25	; 0x0e
     ef0:	8d 87       	std	Y+13, r24	; 0x0d
//	V_pom = (*wskf_P_ADC)(0);
	
	return ((V_pom * Vref / 1024) / (P_LEM * R));
     ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef6:	aa 27       	eor	r26, r26
     ef8:	97 fd       	sbrc	r25, 7
     efa:	a0 95       	com	r26
     efc:	ba 2f       	mov	r27, r26
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 43 14 	call	0x2886	; 0x2886 <__floatsisf>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	29 85       	ldd	r18, Y+9	; 0x09
     f0c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f0e:	4b 85       	ldd	r20, Y+11	; 0x0b
     f10:	5c 85       	ldd	r21, Y+12	; 0x0c
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	54 e4       	ldi	r21, 0x44	; 68
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	7c 01       	movw	r14, r24
     f34:	8d 01       	movw	r16, r26
     f36:	2d 81       	ldd	r18, Y+5	; 0x05
     f38:	3e 81       	ldd	r19, Y+6	; 0x06
     f3a:	4f 81       	ldd	r20, Y+7	; 0x07
     f3c:	58 85       	ldd	r21, Y+8	; 0x08
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9c 01       	movw	r18, r24
     f50:	ad 01       	movw	r20, r26
     f52:	c8 01       	movw	r24, r16
     f54:	b7 01       	movw	r22, r14
     f56:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
}
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	2e 96       	adiw	r28, 0x0e	; 14
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	08 95       	ret

00000f7c <Wybieg>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Wybieg(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <Wybieg+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	ui_PWM = 0;
     f86:	10 92 96 01 	sts	0x0196, r1
     f8a:	10 92 95 01 	sts	0x0195, r1
	suma = 0;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	80 93 af 01 	sts	0x01AF, r24
     f9a:	90 93 b0 01 	sts	0x01B0, r25
     f9e:	a0 93 b1 01 	sts	0x01B1, r26
     fa2:	b0 93 b2 01 	sts	0x01B2, r27
	licz = 0;
     fa6:	10 92 c6 01 	sts	0x01C6, r1
     faa:	10 92 c5 01 	sts	0x01C5, r1
	
	OCR1A = ui_PWM;
     fae:	ea e4       	ldi	r30, 0x4A	; 74
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 91 95 01 	lds	r24, 0x0195
     fb6:	90 91 96 01 	lds	r25, 0x0196
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
	
	f_I_pom = Prad_Pomierzony();
     fbe:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Prad_Pomierzony>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	80 93 5e 01 	sts	0x015E, r24
     fca:	90 93 5f 01 	sts	0x015F, r25
     fce:	a0 93 60 01 	sts	0x0160, r26
     fd2:	b0 93 61 01 	sts	0x0161, r27
//	f_I_pom = (*wskf_P_Pom)();
	
	if(f_I_pom >= 23)
     fd6:	80 91 5e 01 	lds	r24, 0x015E
     fda:	90 91 5f 01 	lds	r25, 0x015F
     fde:	a0 91 60 01 	lds	r26, 0x0160
     fe2:	b0 91 61 01 	lds	r27, 0x0161
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 eb       	ldi	r20, 0xB8	; 184
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     ff6:	88 23       	and	r24, r24
     ff8:	84 f0       	brlt	.+32     	; 0x101a <Wybieg+0x9e>
	{
		return 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	31 c0       	rjmp	.+98     	; 0x1066 <Wybieg+0xea>
	}
	
	while((bit_is_set(PIND,1) && bit_is_set(PIND,0)) || (!bit_is_set(PIND,1) && !bit_is_set(PIND,0)))
	{
		if(reset)
    1004:	80 91 6c 01 	lds	r24, 0x016C
    1008:	90 91 6d 01 	lds	r25, 0x016D
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <Wybieg+0x9e>
		{
			return 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	26 c0       	rjmp	.+76     	; 0x1066 <Wybieg+0xea>
	if(f_I_pom >= 23)
	{
		return 1;
	}
	
	while((bit_is_set(PIND,1) && bit_is_set(PIND,0)) || (!bit_is_set(PIND,1) && !bit_is_set(PIND,0)))
    101a:	e0 e3       	ldi	r30, 0x30	; 48
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	82 70       	andi	r24, 0x02	; 2
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	49 f0       	breq	.+18     	; 0x103e <Wybieg+0xc2>
    102c:	e0 e3       	ldi	r30, 0x30	; 48
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	81 70       	andi	r24, 0x01	; 1
    1038:	90 70       	andi	r25, 0x00	; 0
    103a:	88 23       	and	r24, r24
    103c:	19 f7       	brne	.-58     	; 0x1004 <Wybieg+0x88>
    103e:	e0 e3       	ldi	r30, 0x30	; 48
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	82 70       	andi	r24, 0x02	; 2
    104a:	90 70       	andi	r25, 0x00	; 0
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	49 f4       	brne	.+18     	; 0x1062 <Wybieg+0xe6>
    1050:	e0 e3       	ldi	r30, 0x30	; 48
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	81 70       	andi	r24, 0x01	; 1
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	89 f2       	breq	.-94     	; 0x1004 <Wybieg+0x88>
		{
			return 1;
		}
	}
	
	return 0;	
    1062:	1a 82       	std	Y+2, r1	; 0x02
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <Rozruch>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Rozruch(void)
{
    1074:	4f 92       	push	r4
    1076:	5f 92       	push	r5
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	6e 97       	sbiw	r28, 0x1e	; 30
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
   f_S = 0;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	80 93 ab 01 	sts	0x01AB, r24
    10b0:	90 93 ac 01 	sts	0x01AC, r25
    10b4:	a0 93 ad 01 	sts	0x01AD, r26
    10b8:	b0 93 ae 01 	sts	0x01AE, r27
	f_I_1 = 0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a0 e0       	ldi	r26, 0x00	; 0
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	80 93 56 01 	sts	0x0156, r24
    10c8:	90 93 57 01 	sts	0x0157, r25
    10cc:	a0 93 58 01 	sts	0x0158, r26
    10d0:	b0 93 59 01 	sts	0x0159, r27
	f_Ie_1 = 0;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	80 93 5a 01 	sts	0x015A, r24
    10e0:	90 93 5b 01 	sts	0x015B, r25
    10e4:	a0 93 5c 01 	sts	0x015C, r26
    10e8:	b0 93 5d 01 	sts	0x015D, r27
	
	lcd_clrscr();
    10ec:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
	lcd_puts("    ROZRUCH");
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	
	PORTD &= ~_BV(PORTD6);								// Wylaczenie T1
    10f8:	a2 e3       	ldi	r26, 0x32	; 50
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e3       	ldi	r30, 0x32	; 50
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7b       	andi	r24, 0xBF	; 191
    1104:	8c 93       	st	X, r24
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a8 e4       	ldi	r26, 0x48	; 72
    110c:	b3 e4       	ldi	r27, 0x43	; 67
    110e:	89 8f       	std	Y+25, r24	; 0x19
    1110:	9a 8f       	std	Y+26, r25	; 0x1a
    1112:	ab 8f       	std	Y+27, r26	; 0x1b
    1114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a ef       	ldi	r20, 0xFA	; 250
    111c:	54 e4       	ldi	r21, 0x44	; 68
    111e:	69 8d       	ldd	r22, Y+25	; 0x19
    1120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1126:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8d 8b       	std	Y+21, r24	; 0x15
    1130:	9e 8b       	std	Y+22, r25	; 0x16
    1132:	af 8b       	std	Y+23, r26	; 0x17
    1134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	6d 89       	ldd	r22, Y+21	; 0x15
    1140:	7e 89       	ldd	r23, Y+22	; 0x16
    1142:	8f 89       	ldd	r24, Y+23	; 0x17
    1144:	98 8d       	ldd	r25, Y+24	; 0x18
    1146:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <Rozruch+0xe4>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <Rozruch+0x162>
	else if (__tmp > 65535)
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	6d 89       	ldd	r22, Y+21	; 0x15
    1162:	7e 89       	ldd	r23, Y+22	; 0x16
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	98 8d       	ldd	r25, Y+24	; 0x18
    1168:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <Rozruch+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	69 8d       	ldd	r22, Y+25	; 0x19
    117a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    117c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1180:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <Rozruch+0x144>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 8b       	std	Y+18, r25	; 0x12
    11a0:	89 8b       	std	Y+17, r24	; 0x11
    11a2:	89 89       	ldd	r24, Y+17	; 0x11
    11a4:	9a 89       	ldd	r25, Y+18	; 0x12
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <Rozruch+0x132>
    11aa:	9a 8b       	std	Y+18, r25	; 0x12
    11ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 8b       	std	Y+20, r25	; 0x14
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ba:	9c 89       	ldd	r25, Y+20	; 0x14
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <Rozruch+0x126>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <Rozruch+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	98 8b       	std	Y+16, r25	; 0x10
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <Rozruch+0x16e>
    11e6:	98 8b       	std	Y+16, r25	; 0x10
    11e8:	8f 87       	std	Y+15, r24	; 0x0f
			
	do
	{
	}
//	while((*wskf_P_Pom)());
  	while( Prad_Pomierzony() );
    11ea:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Prad_Pomierzony>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    1202:	88 23       	and	r24, r24
    1204:	91 f7       	brne	.-28     	; 0x11ea <Rozruch+0x176>


	PORTD |= _BV(PORTD4);				// Wlaczenie T2
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	8c 93       	st	X, r24
    1214:	cc c1       	rjmp	.+920    	; 0x15ae <Rozruch+0x53a>
	
	while(bit_is_set(PIND,0) && !bit_is_set(PIND,1))
	{
		f_I_pom = Prad_Pomierzony();
    1216:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Prad_Pomierzony>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	80 93 5e 01 	sts	0x015E, r24
    1222:	90 93 5f 01 	sts	0x015F, r25
    1226:	a0 93 60 01 	sts	0x0160, r26
    122a:	b0 93 61 01 	sts	0x0161, r27
//		f_I_pom = (*wskf_P_Pom)();
		
		if(f_I_pom >= 23)
    122e:	80 91 5e 01 	lds	r24, 0x015E
    1232:	90 91 5f 01 	lds	r25, 0x015F
    1236:	a0 91 60 01 	lds	r26, 0x0160
    123a:	b0 91 61 01 	lds	r27, 0x0161
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	48 eb       	ldi	r20, 0xB8	; 184
    1244:	51 e4       	ldi	r21, 0x41	; 65
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    124e:	88 23       	and	r24, r24
    1250:	0c f4       	brge	.+2      	; 0x1254 <Rozruch+0x1e0>
    1252:	8d c0       	rjmp	.+282    	; 0x136e <Rozruch+0x2fa>
		{
			OCR1A = 0;   					//wylacz PWM
    1254:	ea e4       	ldi	r30, 0x4A	; 74
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	11 82       	std	Z+1, r1	; 0x01
    125a:	10 82       	st	Z, r1
			lcd_clrscr();  				//wyczysc LCD
    125c:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
			lcd_puts("f_I_pom = ");
    1260:	8c e0       	ldi	r24, 0x0C	; 12
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
         wyswietl_float(f_I_pom); 	//wysweitle prad pomierzony
    1268:	80 91 5e 01 	lds	r24, 0x015E
    126c:	90 91 5f 01 	lds	r25, 0x015F
    1270:	a0 91 60 01 	lds	r26, 0x0160
    1274:	b0 91 61 01 	lds	r27, 0x0161
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <wyswietl_float>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e4       	ldi	r25, 0x40	; 64
    1284:	ac e9       	ldi	r26, 0x9C	; 156
    1286:	b5 e4       	ldi	r27, 0x45	; 69
    1288:	8b 87       	std	Y+11, r24	; 0x0b
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	ad 87       	std	Y+13, r26	; 0x0d
    128e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a ef       	ldi	r20, 0xFA	; 250
    1296:	54 e4       	ldi	r21, 0x44	; 68
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <Rozruch+0x25e>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <Rozruch+0x2dc>
	else if (__tmp > 65535)
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <Rozruch+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <Rozruch+0x2be>
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <Rozruch+0x2ac>
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <Rozruch+0x2a0>
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <Rozruch+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <Rozruch+0x2e8>
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
         _delay_ms(5000);				//opoznienie wyswietlania komunikatu

			return 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	38 c1       	rjmp	.+624    	; 0x15de <Rozruch+0x56a>
		}
		
		suma += f_I_pom;
    136e:	e0 90 af 01 	lds	r14, 0x01AF
    1372:	f0 90 b0 01 	lds	r15, 0x01B0
    1376:	00 91 b1 01 	lds	r16, 0x01B1
    137a:	10 91 b2 01 	lds	r17, 0x01B2
    137e:	80 91 5e 01 	lds	r24, 0x015E
    1382:	90 91 5f 01 	lds	r25, 0x015F
    1386:	a0 91 60 01 	lds	r26, 0x0160
    138a:	b0 91 61 01 	lds	r27, 0x0161
    138e:	9c 01       	movw	r18, r24
    1390:	ad 01       	movw	r20, r26
    1392:	c8 01       	movw	r24, r16
    1394:	b7 01       	movw	r22, r14
    1396:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	80 93 af 01 	sts	0x01AF, r24
    13a2:	90 93 b0 01 	sts	0x01B0, r25
    13a6:	a0 93 b1 01 	sts	0x01B1, r26
    13aa:	b0 93 b2 01 	sts	0x01B2, r27
		
		if(licz == 500)
    13ae:	80 91 c5 01 	lds	r24, 0x01C5
    13b2:	90 91 c6 01 	lds	r25, 0x01C6
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	84 3f       	cpi	r24, 0xF4	; 244
    13ba:	92 07       	cpc	r25, r18
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <Rozruch+0x34c>
    13be:	54 c0       	rjmp	.+168    	; 0x1468 <Rozruch+0x3f4>
		{

			lcd_clrscr();
    13c0:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
         lcd_puts("Izad = ");
    13c4:	87 e1       	ldi	r24, 0x17	; 23
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>

			wyswietl_float(Prad_Zadany(ui_Ir_ogr));
    13cc:	80 91 c3 01 	lds	r24, 0x01C3
    13d0:	90 91 c4 01 	lds	r25, 0x01C4
    13d4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Prad_Zadany>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <wyswietl_float>
//			wyswietl_float(4.5);
//		(*wskf_w_float)((*wskf_P_Zad)(ui_Ir_ogr));
//			(*wskf_w_float)(Prad_Zadany(ui_Ir_ogr));
			
			lcd_puts(" A\n");
    13e4:	89 ef       	ldi	r24, 0xF9	; 249
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			suma = suma/500;
    13ec:	80 91 af 01 	lds	r24, 0x01AF
    13f0:	90 91 b0 01 	lds	r25, 0x01B0
    13f4:	a0 91 b1 01 	lds	r26, 0x01B1
    13f8:	b0 91 b2 01 	lds	r27, 0x01B2
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	80 93 af 01 	sts	0x01AF, r24
    1414:	90 93 b0 01 	sts	0x01B0, r25
    1418:	a0 93 b1 01 	sts	0x01B1, r26
    141c:	b0 93 b2 01 	sts	0x01B2, r27

			lcd_puts("Ipom = ");
    1420:	8f e1       	ldi	r24, 0x1F	; 31
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			wyswietl_float(suma);
    1428:	80 91 af 01 	lds	r24, 0x01AF
    142c:	90 91 b0 01 	lds	r25, 0x01B0
    1430:	a0 91 b1 01 	lds	r26, 0x01B1
    1434:	b0 91 b2 01 	lds	r27, 0x01B2
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <wyswietl_float>
//			(*wskf_w_float)(suma);

			lcd_puts(" A\n");
    1440:	89 ef       	ldi	r24, 0xF9	; 249
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			licz = 0;
    1448:	10 92 c6 01 	sts	0x01C6, r1
    144c:	10 92 c5 01 	sts	0x01C5, r1
			suma = 0;
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	80 93 af 01 	sts	0x01AF, r24
    145c:	90 93 b0 01 	sts	0x01B0, r25
    1460:	a0 93 b1 01 	sts	0x01B1, r26
    1464:	b0 93 b2 01 	sts	0x01B2, r27
			
		}
		
		f_I_pwm = Regulator_PI(ui_Ir_ogr, f_I_pom, f_kp_r, f_ki_r);
    1468:	20 91 65 00 	lds	r18, 0x0065
    146c:	30 91 66 00 	lds	r19, 0x0066
    1470:	40 91 67 00 	lds	r20, 0x0067
    1474:	50 91 68 00 	lds	r21, 0x0068
    1478:	80 90 61 00 	lds	r8, 0x0061
    147c:	90 90 62 00 	lds	r9, 0x0062
    1480:	a0 90 63 00 	lds	r10, 0x0063
    1484:	b0 90 64 00 	lds	r11, 0x0064
    1488:	40 90 5e 01 	lds	r4, 0x015E
    148c:	50 90 5f 01 	lds	r5, 0x015F
    1490:	60 90 60 01 	lds	r6, 0x0160
    1494:	70 90 61 01 	lds	r7, 0x0161
    1498:	80 91 c3 01 	lds	r24, 0x01C3
    149c:	90 91 c4 01 	lds	r25, 0x01C4
    14a0:	69 01       	movw	r12, r18
    14a2:	7a 01       	movw	r14, r20
    14a4:	95 01       	movw	r18, r10
    14a6:	84 01       	movw	r16, r8
    14a8:	b3 01       	movw	r22, r6
    14aa:	a2 01       	movw	r20, r4
    14ac:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Regulator_PI>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	80 93 99 01 	sts	0x0199, r24
    14b8:	90 93 9a 01 	sts	0x019A, r25
    14bc:	a0 93 9b 01 	sts	0x019B, r26
    14c0:	b0 93 9c 01 	sts	0x019C, r27
//		f_I_pwm = (*wskf_R_PI)(ui_Ir_ogr, f_I_pom, f_kp_r, f_ki_r);
		
		if(f_I_pwm < 0)
    14c4:	80 91 99 01 	lds	r24, 0x0199
    14c8:	90 91 9a 01 	lds	r25, 0x019A
    14cc:	a0 91 9b 01 	lds	r26, 0x019B
    14d0:	b0 91 9c 01 	lds	r27, 0x019C
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	64 f4       	brge	.+24     	; 0x1500 <Rozruch+0x48c>
		{
			f_I_pwm = 0;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	80 93 99 01 	sts	0x0199, r24
    14f4:	90 93 9a 01 	sts	0x019A, r25
    14f8:	a0 93 9b 01 	sts	0x019B, r26
    14fc:	b0 93 9c 01 	sts	0x019C, r27
		}
		
		f_I_pwm *= 100;
    1500:	80 91 99 01 	lds	r24, 0x0199
    1504:	90 91 9a 01 	lds	r25, 0x019A
    1508:	a0 91 9b 01 	lds	r26, 0x019B
    150c:	b0 91 9c 01 	lds	r27, 0x019C
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	48 ec       	ldi	r20, 0xC8	; 200
    1516:	52 e4       	ldi	r21, 0x42	; 66
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	80 93 99 01 	sts	0x0199, r24
    1528:	90 93 9a 01 	sts	0x019A, r25
    152c:	a0 93 9b 01 	sts	0x019B, r26
    1530:	b0 93 9c 01 	sts	0x019C, r27
		f_I_pwm += 0.5;
    1534:	80 91 99 01 	lds	r24, 0x0199
    1538:	90 91 9a 01 	lds	r25, 0x019A
    153c:	a0 91 9b 01 	lds	r26, 0x019B
    1540:	b0 91 9c 01 	lds	r27, 0x019C
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	80 93 99 01 	sts	0x0199, r24
    155c:	90 93 9a 01 	sts	0x019A, r25
    1560:	a0 93 9b 01 	sts	0x019B, r26
    1564:	b0 93 9c 01 	sts	0x019C, r27
		
		ui_PWM = (unsigned int)f_I_pwm;
    1568:	80 91 99 01 	lds	r24, 0x0199
    156c:	90 91 9a 01 	lds	r25, 0x019A
    1570:	a0 91 9b 01 	lds	r26, 0x019B
    1574:	b0 91 9c 01 	lds	r27, 0x019C
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	90 93 96 01 	sts	0x0196, r25
    1588:	80 93 95 01 	sts	0x0195, r24
		
		OCR1A = ui_PWM;
    158c:	ea e4       	ldi	r30, 0x4A	; 74
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 91 95 01 	lds	r24, 0x0195
    1594:	90 91 96 01 	lds	r25, 0x0196
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
	
		licz++;
    159c:	80 91 c5 01 	lds	r24, 0x01C5
    15a0:	90 91 c6 01 	lds	r25, 0x01C6
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	90 93 c6 01 	sts	0x01C6, r25
    15aa:	80 93 c5 01 	sts	0x01C5, r24
  	while( Prad_Pomierzony() );


	PORTD |= _BV(PORTD4);				// Wlaczenie T2
	
	while(bit_is_set(PIND,0) && !bit_is_set(PIND,1))
    15ae:	e0 e3       	ldi	r30, 0x30	; 48
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	81 70       	andi	r24, 0x01	; 1
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	98 2f       	mov	r25, r24
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 27       	eor	r24, r25
    15c2:	88 23       	and	r24, r24
    15c4:	51 f4       	brne	.+20     	; 0x15da <Rozruch+0x566>
    15c6:	e0 e3       	ldi	r30, 0x30	; 48
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	82 70       	andi	r24, 0x02	; 2
    15d2:	90 70       	andi	r25, 0x00	; 0
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	09 f4       	brne	.+2      	; 0x15da <Rozruch+0x566>
    15d8:	1e ce       	rjmp	.-964    	; 0x1216 <Rozruch+0x1a2>
	
		licz++;
			
	}
	
	return 0;
    15da:	1e 8e       	std	Y+30, r1	; 0x1e
    15dc:	1d 8e       	std	Y+29, r1	; 0x1d
    15de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
	
}
    15e2:	6e 96       	adiw	r28, 0x1e	; 30
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	7f 90       	pop	r7
    1608:	6f 90       	pop	r6
    160a:	5f 90       	pop	r5
    160c:	4f 90       	pop	r4
    160e:	08 95       	ret

00001610 <Hamowanie>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int Hamowanie(void)
{
    1610:	4f 92       	push	r4
    1612:	5f 92       	push	r5
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	60 97       	sbiw	r28, 0x10	; 16
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
	f_S = 0;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	80 93 ab 01 	sts	0x01AB, r24
    164c:	90 93 ac 01 	sts	0x01AC, r25
    1650:	a0 93 ad 01 	sts	0x01AD, r26
    1654:	b0 93 ae 01 	sts	0x01AE, r27
	f_I_1 = 0;
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	80 93 56 01 	sts	0x0156, r24
    1664:	90 93 57 01 	sts	0x0157, r25
    1668:	a0 93 58 01 	sts	0x0158, r26
    166c:	b0 93 59 01 	sts	0x0159, r27
	f_Ie_1 = 0;
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	80 93 5a 01 	sts	0x015A, r24
    167c:	90 93 5b 01 	sts	0x015B, r25
    1680:	a0 93 5c 01 	sts	0x015C, r26
    1684:	b0 93 5d 01 	sts	0x015D, r27
	
	lcd_clrscr();
    1688:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
	lcd_puts("    HAMOWANIE");
    168c:	87 e2       	ldi	r24, 0x27	; 39
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	
	PORTD &= ~_BV(PORTD4);				// Wylaczenie T2
    1694:	a2 e3       	ldi	r26, 0x32	; 50
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a8 e4       	ldi	r26, 0x48	; 72
    16a8:	b3 e4       	ldi	r27, 0x43	; 67
    16aa:	8b 87       	std	Y+11, r24	; 0x0b
    16ac:	9c 87       	std	Y+12, r25	; 0x0c
    16ae:	ad 87       	std	Y+13, r26	; 0x0d
    16b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a ef       	ldi	r20, 0xFA	; 250
    16b8:	54 e4       	ldi	r21, 0x44	; 68
    16ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    16bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8f 83       	std	Y+7, r24	; 0x07
    16cc:	98 87       	std	Y+8, r25	; 0x08
    16ce:	a9 87       	std	Y+9, r26	; 0x09
    16d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <Hamowanie+0xe4>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <Hamowanie+0x162>
	else if (__tmp > 65535)
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <Hamowanie+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	6b 85       	ldd	r22, Y+11	; 0x0b
    1716:	7c 85       	ldd	r23, Y+12	; 0x0c
    1718:	8d 85       	ldd	r24, Y+13	; 0x0d
    171a:	9e 85       	ldd	r25, Y+14	; 0x0e
    171c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <Hamowanie+0x144>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <Hamowanie+0x132>
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <Hamowanie+0x126>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <Hamowanie+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <Hamowanie+0x16e>
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);						// Opoznienie aby nie przelaczac jednoczesnie tranzystorow
	
	do
	{
	}
	while(Prad_Pomierzony());
    1786:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Prad_Pomierzony>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    179e:	88 23       	and	r24, r24
    17a0:	91 f7       	brne	.-28     	; 0x1786 <Hamowanie+0x176>


	
	PORTD |= _BV(PORTD6);				// Wlaczenie T1
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 64       	ori	r24, 0x40	; 64
    17ae:	8c 93       	st	X, r24
    17b0:	43 c1       	rjmp	.+646    	; 0x1a38 <Hamowanie+0x428>
	
	while(bit_is_set(PIND,1) && !bit_is_set(PIND,0))
	{
		f_I_pom = Prad_Pomierzony();
    17b2:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Prad_Pomierzony>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	80 93 5e 01 	sts	0x015E, r24
    17be:	90 93 5f 01 	sts	0x015F, r25
    17c2:	a0 93 60 01 	sts	0x0160, r26
    17c6:	b0 93 61 01 	sts	0x0161, r27
//		f_I_pom = (*wskf_P_Pom)();
		
		if(f_I_pom >= 23)
    17ca:	80 91 5e 01 	lds	r24, 0x015E
    17ce:	90 91 5f 01 	lds	r25, 0x015F
    17d2:	a0 91 60 01 	lds	r26, 0x0160
    17d6:	b0 91 61 01 	lds	r27, 0x0161
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	48 eb       	ldi	r20, 0xB8	; 184
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f0       	brlt	.+10     	; 0x17f8 <Hamowanie+0x1e8>
		{
				return 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	98 8b       	std	Y+16, r25	; 0x10
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	35 c1       	rjmp	.+618    	; 0x1a62 <Hamowanie+0x452>
		}
		
		suma += f_I_pom;
    17f8:	e0 90 af 01 	lds	r14, 0x01AF
    17fc:	f0 90 b0 01 	lds	r15, 0x01B0
    1800:	00 91 b1 01 	lds	r16, 0x01B1
    1804:	10 91 b2 01 	lds	r17, 0x01B2
    1808:	80 91 5e 01 	lds	r24, 0x015E
    180c:	90 91 5f 01 	lds	r25, 0x015F
    1810:	a0 91 60 01 	lds	r26, 0x0160
    1814:	b0 91 61 01 	lds	r27, 0x0161
    1818:	9c 01       	movw	r18, r24
    181a:	ad 01       	movw	r20, r26
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	80 93 af 01 	sts	0x01AF, r24
    182c:	90 93 b0 01 	sts	0x01B0, r25
    1830:	a0 93 b1 01 	sts	0x01B1, r26
    1834:	b0 93 b2 01 	sts	0x01B2, r27
		
		if(licz == 500)
    1838:	80 91 c5 01 	lds	r24, 0x01C5
    183c:	90 91 c6 01 	lds	r25, 0x01C6
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	84 3f       	cpi	r24, 0xF4	; 244
    1844:	92 07       	cpc	r25, r18
    1846:	09 f0       	breq	.+2      	; 0x184a <Hamowanie+0x23a>
    1848:	54 c0       	rjmp	.+168    	; 0x18f2 <Hamowanie+0x2e2>
		{
         lcd_clrscr();
    184a:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
         lcd_puts("Izad = ");
    184e:	87 e1       	ldi	r24, 0x17	; 23
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			wyswietl_float(Prad_Zadany(ui_Ih_ogr));
    1856:	80 91 9f 01 	lds	r24, 0x019F
    185a:	90 91 a0 01 	lds	r25, 0x01A0
    185e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Prad_Zadany>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <wyswietl_float>
//			(*wskf_w_float)((*wskf_P_Zad)(ui_Ih_ogr));

			lcd_puts(" A\n");
    186e:	89 ef       	ldi	r24, 0xF9	; 249
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			suma = suma/500;
    1876:	80 91 af 01 	lds	r24, 0x01AF
    187a:	90 91 b0 01 	lds	r25, 0x01B0
    187e:	a0 91 b1 01 	lds	r26, 0x01B1
    1882:	b0 91 b2 01 	lds	r27, 0x01B2
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a ef       	ldi	r20, 0xFA	; 250
    188c:	53 e4       	ldi	r21, 0x43	; 67
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	80 93 af 01 	sts	0x01AF, r24
    189e:	90 93 b0 01 	sts	0x01B0, r25
    18a2:	a0 93 b1 01 	sts	0x01B1, r26
    18a6:	b0 93 b2 01 	sts	0x01B2, r27

			lcd_puts("Ipom = ");
    18aa:	8f e1       	ldi	r24, 0x1F	; 31
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			wyswietl_float(suma);
    18b2:	80 91 af 01 	lds	r24, 0x01AF
    18b6:	90 91 b0 01 	lds	r25, 0x01B0
    18ba:	a0 91 b1 01 	lds	r26, 0x01B1
    18be:	b0 91 b2 01 	lds	r27, 0x01B2
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <wyswietl_float>
//			(*wskf_w_float)(suma);

			lcd_puts(" A");
    18ca:	8d ef       	ldi	r24, 0xFD	; 253
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
			
			licz = 0;
    18d2:	10 92 c6 01 	sts	0x01C6, r1
    18d6:	10 92 c5 01 	sts	0x01C5, r1
			suma = 0;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	80 93 af 01 	sts	0x01AF, r24
    18e6:	90 93 b0 01 	sts	0x01B0, r25
    18ea:	a0 93 b1 01 	sts	0x01B1, r26
    18ee:	b0 93 b2 01 	sts	0x01B2, r27
			
		}
	
		f_I_pwm = Regulator_PI(ui_Ih_ogr, f_I_pom, f_kp_h, f_ki_h);
    18f2:	20 91 6d 00 	lds	r18, 0x006D
    18f6:	30 91 6e 00 	lds	r19, 0x006E
    18fa:	40 91 6f 00 	lds	r20, 0x006F
    18fe:	50 91 70 00 	lds	r21, 0x0070
    1902:	80 90 69 00 	lds	r8, 0x0069
    1906:	90 90 6a 00 	lds	r9, 0x006A
    190a:	a0 90 6b 00 	lds	r10, 0x006B
    190e:	b0 90 6c 00 	lds	r11, 0x006C
    1912:	40 90 5e 01 	lds	r4, 0x015E
    1916:	50 90 5f 01 	lds	r5, 0x015F
    191a:	60 90 60 01 	lds	r6, 0x0160
    191e:	70 90 61 01 	lds	r7, 0x0161
    1922:	80 91 9f 01 	lds	r24, 0x019F
    1926:	90 91 a0 01 	lds	r25, 0x01A0
    192a:	69 01       	movw	r12, r18
    192c:	7a 01       	movw	r14, r20
    192e:	95 01       	movw	r18, r10
    1930:	84 01       	movw	r16, r8
    1932:	b3 01       	movw	r22, r6
    1934:	a2 01       	movw	r20, r4
    1936:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Regulator_PI>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	80 93 99 01 	sts	0x0199, r24
    1942:	90 93 9a 01 	sts	0x019A, r25
    1946:	a0 93 9b 01 	sts	0x019B, r26
    194a:	b0 93 9c 01 	sts	0x019C, r27
//		f_I_pwm = (*wskf_R_PI)(ui_Ih_ogr, f_I_pom, f_kp_h, f_ki_h);

		if(f_I_pwm < 0)
    194e:	80 91 99 01 	lds	r24, 0x0199
    1952:	90 91 9a 01 	lds	r25, 0x019A
    1956:	a0 91 9b 01 	lds	r26, 0x019B
    195a:	b0 91 9c 01 	lds	r27, 0x019C
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    196e:	88 23       	and	r24, r24
    1970:	64 f4       	brge	.+24     	; 0x198a <Hamowanie+0x37a>
		{
			f_I_pwm = 0;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	80 93 99 01 	sts	0x0199, r24
    197e:	90 93 9a 01 	sts	0x019A, r25
    1982:	a0 93 9b 01 	sts	0x019B, r26
    1986:	b0 93 9c 01 	sts	0x019C, r27
		}
		
		f_I_pwm *= 100;
    198a:	80 91 99 01 	lds	r24, 0x0199
    198e:	90 91 9a 01 	lds	r25, 0x019A
    1992:	a0 91 9b 01 	lds	r26, 0x019B
    1996:	b0 91 9c 01 	lds	r27, 0x019C
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	48 ec       	ldi	r20, 0xC8	; 200
    19a0:	52 e4       	ldi	r21, 0x42	; 66
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	80 93 99 01 	sts	0x0199, r24
    19b2:	90 93 9a 01 	sts	0x019A, r25
    19b6:	a0 93 9b 01 	sts	0x019B, r26
    19ba:	b0 93 9c 01 	sts	0x019C, r27
		f_I_pwm += 0.5;
    19be:	80 91 99 01 	lds	r24, 0x0199
    19c2:	90 91 9a 01 	lds	r25, 0x019A
    19c6:	a0 91 9b 01 	lds	r26, 0x019B
    19ca:	b0 91 9c 01 	lds	r27, 0x019C
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	80 93 99 01 	sts	0x0199, r24
    19e6:	90 93 9a 01 	sts	0x019A, r25
    19ea:	a0 93 9b 01 	sts	0x019B, r26
    19ee:	b0 93 9c 01 	sts	0x019C, r27
		
		ui_PWM = (unsigned int)f_I_pwm;
    19f2:	80 91 99 01 	lds	r24, 0x0199
    19f6:	90 91 9a 01 	lds	r25, 0x019A
    19fa:	a0 91 9b 01 	lds	r26, 0x019B
    19fe:	b0 91 9c 01 	lds	r27, 0x019C
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	90 93 96 01 	sts	0x0196, r25
    1a12:	80 93 95 01 	sts	0x0195, r24

		OCR1A = ui_PWM;
    1a16:	ea e4       	ldi	r30, 0x4A	; 74
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 91 95 01 	lds	r24, 0x0195
    1a1e:	90 91 96 01 	lds	r25, 0x0196
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
		
		licz++;
    1a26:	80 91 c5 01 	lds	r24, 0x01C5
    1a2a:	90 91 c6 01 	lds	r25, 0x01C6
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	90 93 c6 01 	sts	0x01C6, r25
    1a34:	80 93 c5 01 	sts	0x01C5, r24


	
	PORTD |= _BV(PORTD6);				// Wlaczenie T1
	
	while(bit_is_set(PIND,1) && !bit_is_set(PIND,0))
    1a38:	e0 e3       	ldi	r30, 0x30	; 48
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	82 70       	andi	r24, 0x02	; 2
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	51 f0       	breq	.+20     	; 0x1a5e <Hamowanie+0x44e>
    1a4a:	e0 e3       	ldi	r30, 0x30	; 48
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <Hamowanie+0x44e>
    1a5c:	aa ce       	rjmp	.-684    	; 0x17b2 <Hamowanie+0x1a2>
		OCR1A = ui_PWM;
		
		licz++;
	}
	
	return 0;
    1a5e:	18 8a       	std	Y+16, r1	; 0x10
    1a60:	1f 86       	std	Y+15, r1	; 0x0f
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	98 89       	ldd	r25, Y+16	; 0x10
	
}
    1a66:	60 96       	adiw	r28, 0x10	; 16
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	7f 90       	pop	r7
    1a8c:	6f 90       	pop	r6
    1a8e:	5f 90       	pop	r5
    1a90:	4f 90       	pop	r4
    1a92:	08 95       	ret

00001a94 <__vector_1>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SIGNAL (SIG_INTERRUPT0)
{
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	8f 93       	push	r24
    1aa0:	9f 93       	push	r25
    1aa2:	ef 93       	push	r30
    1aa4:	ff 93       	push	r31
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 0;
    1aae:	ea e4       	ldi	r30, 0x4A	; 74
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	11 82       	std	Z+1, r1	; 0x01
    1ab4:	10 82       	st	Z, r1
	
	if(r_jazdy)
    1ab6:	80 91 c1 01 	lds	r24, 0x01C1
    1aba:	90 91 c2 01 	lds	r25, 0x01C2
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	a1 f1       	breq	.+104    	; 0x1b2a <__vector_1+0x96>
	{	
		lcd_clrscr();
    1ac2:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
		lcd_puts("      RESET \n");
    1ac6:	85 e3       	ldi	r24, 0x35	; 53
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
		lcd_puts("   ZEWNETRZNY");
    1ace:	83 e4       	ldi	r24, 0x43	; 67
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>

	
		while((bit_is_set(PIND,1) && !bit_is_set(PIND,0)) || (!bit_is_set(PIND,1) && bit_is_set(PIND,0)));
    1ad6:	e0 e3       	ldi	r30, 0x30	; 48
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	82 70       	andi	r24, 0x02	; 2
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	49 f0       	breq	.+18     	; 0x1afa <__vector_1+0x66>
    1ae8:	e0 e3       	ldi	r30, 0x30	; 48
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	71 f3       	breq	.-36     	; 0x1ad6 <__vector_1+0x42>
    1afa:	e0 e3       	ldi	r30, 0x30	; 48
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	82 70       	andi	r24, 0x02	; 2
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	49 f4       	brne	.+18     	; 0x1b1e <__vector_1+0x8a>
    1b0c:	e0 e3       	ldi	r30, 0x30	; 48
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	81 70       	andi	r24, 0x01	; 1
    1b18:	90 70       	andi	r25, 0x00	; 0
    1b1a:	88 23       	and	r24, r24
    1b1c:	e1 f6       	brne	.-72     	; 0x1ad6 <__vector_1+0x42>
		reset = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	90 93 6d 01 	sts	0x016D, r25
    1b26:	80 93 6c 01 	sts	0x016C, r24
	}
}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <wyswietl_float>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void wyswietl_float(float liczba)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <wyswietl_float+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <wyswietl_float+0x8>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <wyswietl_float+0xa>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	6b 83       	std	Y+3, r22	; 0x03
    1b50:	7c 83       	std	Y+4, r23	; 0x04
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	9e 83       	std	Y+6, r25	; 0x06
	int zmie;

	zmie = liczba;
    1b56:	6b 81       	ldd	r22, Y+3	; 0x03
    1b58:	7c 81       	ldd	r23, Y+4	; 0x04
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	0e 94 10 14 	call	0x2820	; 0x2820 <__fixsfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
	utoa(liczba, c_buffer_n, 10);
    1b6a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b6c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	0e 94 15 14 	call	0x282a	; 0x282a <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	80 e9       	ldi	r24, 0x90	; 144
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	4a e0       	ldi	r20, 0x0A	; 10
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	bc 01       	movw	r22, r24
    1b86:	c9 01       	movw	r24, r18
    1b88:	0e 94 19 13 	call	0x2632	; 0x2632 <utoa>

	lcd_puts(c_buffer_n);
    1b8c:	80 e9       	ldi	r24, 0x90	; 144
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	lcd_puts(".");
    1b94:	81 e5       	ldi	r24, 0x51	; 81
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>

	zmie = (liczba - zmie)*100;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	aa 27       	eor	r26, r26
    1ba2:	97 fd       	sbrc	r25, 7
    1ba4:	a0 95       	com	r26
    1ba6:	ba 2f       	mov	r27, r26
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 43 14 	call	0x2886	; 0x2886 <__floatsisf>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	ad 01       	movw	r20, r26
    1bb8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bba:	7c 81       	ldd	r23, Y+4	; 0x04
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	0e 94 3f 13 	call	0x267e	; 0x267e <__subsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	48 ec       	ldi	r20, 0xC8	; 200
    1bce:	52 e4       	ldi	r21, 0x42	; 66
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 10 14 	call	0x2820	; 0x2820 <__fixsfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
	if(zmie < 10)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	8a 30       	cpi	r24, 0x0A	; 10
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	24 f4       	brge	.+8      	; 0x1bfe <wyswietl_float+0xbe>
	{
		lcd_puts("0");
    1bf6:	83 e5       	ldi	r24, 0x53	; 83
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
	}

	utoa(zmie, c_buffer_n, 10);
    1bfe:	29 81       	ldd	r18, Y+1	; 0x01
    1c00:	3a 81       	ldd	r19, Y+2	; 0x02
    1c02:	80 e9       	ldi	r24, 0x90	; 144
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	4a e0       	ldi	r20, 0x0A	; 10
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	0e 94 19 13 	call	0x2632	; 0x2632 <utoa>
	lcd_puts(c_buffer_n);
    1c12:	80 e9       	ldi	r24, 0x90	; 144
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 50 12 	call	0x24a0	; 0x24a0 <lcd_puts>
}
    1c1a:	26 96       	adiw	r28, 0x06	; 6
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Regulator_PI>:

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


float Regulator_PI(int I_ogr, float I_pom, float kp, float ki)
{
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	2e 97       	sbiw	r28, 0x0e	; 14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	4b 83       	std	Y+3, r20	; 0x03
    1c52:	5c 83       	std	Y+4, r21	; 0x04
    1c54:	6d 83       	std	Y+5, r22	; 0x05
    1c56:	7e 83       	std	Y+6, r23	; 0x06
    1c58:	0f 83       	std	Y+7, r16	; 0x07
    1c5a:	18 87       	std	Y+8, r17	; 0x08
    1c5c:	29 87       	std	Y+9, r18	; 0x09
    1c5e:	3a 87       	std	Y+10, r19	; 0x0a
    1c60:	cb 86       	std	Y+11, r12	; 0x0b
    1c62:	dc 86       	std	Y+12, r13	; 0x0c
    1c64:	ed 86       	std	Y+13, r14	; 0x0d
    1c66:	fe 86       	std	Y+14, r15	; 0x0e
	f_Ie = 0;
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	80 93 a1 01 	sts	0x01A1, r24
    1c74:	90 93 a2 01 	sts	0x01A2, r25
    1c78:	a0 93 a3 01 	sts	0x01A3, r26
    1c7c:	b0 93 a4 01 	sts	0x01A4, r27
	f_I_zad = Prad_Zadany(I_ogr);
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Prad_Zadany>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	80 93 75 01 	sts	0x0175, r24
    1c90:	90 93 76 01 	sts	0x0176, r25
    1c94:	a0 93 77 01 	sts	0x0177, r26
    1c98:	b0 93 78 01 	sts	0x0178, r27
//	f_I_zad = (*wskf_P_Zad)(I_ogr);
		
	f_Ie = f_I_zad - I_pom;
    1c9c:	80 91 75 01 	lds	r24, 0x0175
    1ca0:	90 91 76 01 	lds	r25, 0x0176
    1ca4:	a0 91 77 01 	lds	r26, 0x0177
    1ca8:	b0 91 78 01 	lds	r27, 0x0178
    1cac:	2b 81       	ldd	r18, Y+3	; 0x03
    1cae:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb0:	4d 81       	ldd	r20, Y+5	; 0x05
    1cb2:	5e 81       	ldd	r21, Y+6	; 0x06
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 3f 13 	call	0x267e	; 0x267e <__subsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	80 93 a1 01 	sts	0x01A1, r24
    1cc4:	90 93 a2 01 	sts	0x01A2, r25
    1cc8:	a0 93 a3 01 	sts	0x01A3, r26
    1ccc:	b0 93 a4 01 	sts	0x01A4, r27

	f_Ip = f_Ie * kp;
    1cd0:	80 91 a1 01 	lds	r24, 0x01A1
    1cd4:	90 91 a2 01 	lds	r25, 0x01A2
    1cd8:	a0 91 a3 01 	lds	r26, 0x01A3
    1cdc:	b0 91 a4 01 	lds	r27, 0x01A4
    1ce0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ce2:	38 85       	ldd	r19, Y+8	; 0x08
    1ce4:	49 85       	ldd	r20, Y+9	; 0x09
    1ce6:	5a 85       	ldd	r21, Y+10	; 0x0a
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	80 93 62 01 	sts	0x0162, r24
    1cf8:	90 93 63 01 	sts	0x0163, r25
    1cfc:	a0 93 64 01 	sts	0x0164, r26
    1d00:	b0 93 65 01 	sts	0x0165, r27
	
	if(f_I_wy < 20)
    1d04:	80 91 7b 01 	lds	r24, 0x017B
    1d08:	90 91 7c 01 	lds	r25, 0x017C
    1d0c:	a0 91 7d 01 	lds	r26, 0x017D
    1d10:	b0 91 7e 01 	lds	r27, 0x017E
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 ea       	ldi	r20, 0xA0	; 160
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	0c f0       	brlt	.+2      	; 0x1d2a <Regulator_PI+0xfe>
    1d28:	55 c0       	rjmp	.+170    	; 0x1dd4 <Regulator_PI+0x1a8>
	{
		f_S = f_S + f_Ie_1;
    1d2a:	e0 90 ab 01 	lds	r14, 0x01AB
    1d2e:	f0 90 ac 01 	lds	r15, 0x01AC
    1d32:	00 91 ad 01 	lds	r16, 0x01AD
    1d36:	10 91 ae 01 	lds	r17, 0x01AE
    1d3a:	80 91 5a 01 	lds	r24, 0x015A
    1d3e:	90 91 5b 01 	lds	r25, 0x015B
    1d42:	a0 91 5c 01 	lds	r26, 0x015C
    1d46:	b0 91 5d 01 	lds	r27, 0x015D
    1d4a:	9c 01       	movw	r18, r24
    1d4c:	ad 01       	movw	r20, r26
    1d4e:	c8 01       	movw	r24, r16
    1d50:	b7 01       	movw	r22, r14
    1d52:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	80 93 ab 01 	sts	0x01AB, r24
    1d5e:	90 93 ac 01 	sts	0x01AC, r25
    1d62:	a0 93 ad 01 	sts	0x01AD, r26
    1d66:	b0 93 ae 01 	sts	0x01AE, r27
		f_Ii = (f_Ie + f_S)/2 * ki; //+ f_I_1;
    1d6a:	e0 90 a1 01 	lds	r14, 0x01A1
    1d6e:	f0 90 a2 01 	lds	r15, 0x01A2
    1d72:	00 91 a3 01 	lds	r16, 0x01A3
    1d76:	10 91 a4 01 	lds	r17, 0x01A4
    1d7a:	80 91 ab 01 	lds	r24, 0x01AB
    1d7e:	90 91 ac 01 	lds	r25, 0x01AC
    1d82:	a0 91 ad 01 	lds	r26, 0x01AD
    1d86:	b0 91 ae 01 	lds	r27, 0x01AE
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	ad 01       	movw	r20, r26
    1d8e:	c8 01       	movw	r24, r16
    1d90:	b7 01       	movw	r22, r14
    1d92:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e4       	ldi	r21, 0x40	; 64
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	2b 85       	ldd	r18, Y+11	; 0x0b
    1db0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1db2:	4d 85       	ldd	r20, Y+13	; 0x0d
    1db4:	5e 85       	ldd	r21, Y+14	; 0x0e
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	80 93 8a 01 	sts	0x018A, r24
    1dc6:	90 93 8b 01 	sts	0x018B, r25
    1dca:	a0 93 8c 01 	sts	0x018C, r26
    1dce:	b0 93 8d 01 	sts	0x018D, r27
    1dd2:	36 c0       	rjmp	.+108    	; 0x1e40 <Regulator_PI+0x214>
	}
	else
	{
		czas++;
    1dd4:	80 91 9d 01 	lds	r24, 0x019D
    1dd8:	90 91 9e 01 	lds	r25, 0x019E
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	90 93 9e 01 	sts	0x019E, r25
    1de2:	80 93 9d 01 	sts	0x019D, r24
		
		if(czas == 400)
    1de6:	80 91 9d 01 	lds	r24, 0x019D
    1dea:	90 91 9e 01 	lds	r25, 0x019E
    1dee:	21 e0       	ldi	r18, 0x01	; 1
    1df0:	80 39       	cpi	r24, 0x90	; 144
    1df2:	92 07       	cpc	r25, r18
    1df4:	29 f5       	brne	.+74     	; 0x1e40 <Regulator_PI+0x214>
		{
			czas_2++;
    1df6:	80 91 6e 01 	lds	r24, 0x016E
    1dfa:	90 91 6f 01 	lds	r25, 0x016F
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	90 93 6f 01 	sts	0x016F, r25
    1e04:	80 93 6e 01 	sts	0x016E, r24
			if(czas_2 == 1000)
    1e08:	80 91 6e 01 	lds	r24, 0x016E
    1e0c:	90 91 6f 01 	lds	r25, 0x016F
    1e10:	23 e0       	ldi	r18, 0x03	; 3
    1e12:	88 3e       	cpi	r24, 0xE8	; 232
    1e14:	92 07       	cpc	r25, r18
    1e16:	81 f4       	brne	.+32     	; 0x1e38 <Regulator_PI+0x20c>
			{
				czas_2 = 0;
    1e18:	10 92 6f 01 	sts	0x016F, r1
    1e1c:	10 92 6e 01 	sts	0x016E, r1
				f_Ii = 0;
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	80 93 8a 01 	sts	0x018A, r24
    1e2c:	90 93 8b 01 	sts	0x018B, r25
    1e30:	a0 93 8c 01 	sts	0x018C, r26
    1e34:	b0 93 8d 01 	sts	0x018D, r27
			}
			czas = 0;
    1e38:	10 92 9e 01 	sts	0x019E, r1
    1e3c:	10 92 9d 01 	sts	0x019D, r1
		}
			
	}
	
	f_I_wy = f_Ip + f_Ii;
    1e40:	e0 90 62 01 	lds	r14, 0x0162
    1e44:	f0 90 63 01 	lds	r15, 0x0163
    1e48:	00 91 64 01 	lds	r16, 0x0164
    1e4c:	10 91 65 01 	lds	r17, 0x0165
    1e50:	80 91 8a 01 	lds	r24, 0x018A
    1e54:	90 91 8b 01 	lds	r25, 0x018B
    1e58:	a0 91 8c 01 	lds	r26, 0x018C
    1e5c:	b0 91 8d 01 	lds	r27, 0x018D
    1e60:	9c 01       	movw	r18, r24
    1e62:	ad 01       	movw	r20, r26
    1e64:	c8 01       	movw	r24, r16
    1e66:	b7 01       	movw	r22, r14
    1e68:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	80 93 7b 01 	sts	0x017B, r24
    1e74:	90 93 7c 01 	sts	0x017C, r25
    1e78:	a0 93 7d 01 	sts	0x017D, r26
    1e7c:	b0 93 7e 01 	sts	0x017E, r27
	
	if(f_I_wy > 20)
    1e80:	80 91 7b 01 	lds	r24, 0x017B
    1e84:	90 91 7c 01 	lds	r25, 0x017C
    1e88:	a0 91 7d 01 	lds	r26, 0x017D
    1e8c:	b0 91 7e 01 	lds	r27, 0x017E
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 ea       	ldi	r20, 0xA0	; 160
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	64 f4       	brge	.+24     	; 0x1ebc <Regulator_PI+0x290>
	{
		f_I_wy = 20;
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eaa:	b1 e4       	ldi	r27, 0x41	; 65
    1eac:	80 93 7b 01 	sts	0x017B, r24
    1eb0:	90 93 7c 01 	sts	0x017C, r25
    1eb4:	a0 93 7d 01 	sts	0x017D, r26
    1eb8:	b0 93 7e 01 	sts	0x017E, r27
	}
	
	if(f_I_wy < 0)
    1ebc:	80 91 7b 01 	lds	r24, 0x017B
    1ec0:	90 91 7c 01 	lds	r25, 0x017C
    1ec4:	a0 91 7d 01 	lds	r26, 0x017D
    1ec8:	b0 91 7e 01 	lds	r27, 0x017E
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 a4 13 	call	0x2748	; 0x2748 <__cmpsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	64 f4       	brge	.+24     	; 0x1ef8 <Regulator_PI+0x2cc>
	{
		f_I_wy = 0;
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e0       	ldi	r26, 0x00	; 0
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	80 93 7b 01 	sts	0x017B, r24
    1eec:	90 93 7c 01 	sts	0x017C, r25
    1ef0:	a0 93 7d 01 	sts	0x017D, r26
    1ef4:	b0 93 7e 01 	sts	0x017E, r27
	}
	
	f_I_1 = (f_Ie + f_S)/2 * ki;
    1ef8:	e0 90 a1 01 	lds	r14, 0x01A1
    1efc:	f0 90 a2 01 	lds	r15, 0x01A2
    1f00:	00 91 a3 01 	lds	r16, 0x01A3
    1f04:	10 91 a4 01 	lds	r17, 0x01A4
    1f08:	80 91 ab 01 	lds	r24, 0x01AB
    1f0c:	90 91 ac 01 	lds	r25, 0x01AC
    1f10:	a0 91 ad 01 	lds	r26, 0x01AD
    1f14:	b0 91 ae 01 	lds	r27, 0x01AE
    1f18:	9c 01       	movw	r18, r24
    1f1a:	ad 01       	movw	r20, r26
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	b7 01       	movw	r22, r14
    1f20:	0e 94 40 13 	call	0x2680	; 0x2680 <__addsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e4       	ldi	r21, 0x40	; 64
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f3e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f40:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f42:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	80 93 56 01 	sts	0x0156, r24
    1f54:	90 93 57 01 	sts	0x0157, r25
    1f58:	a0 93 58 01 	sts	0x0158, r26
    1f5c:	b0 93 59 01 	sts	0x0159, r27
	
	f_Ie_1 = f_Ie;
    1f60:	80 91 a1 01 	lds	r24, 0x01A1
    1f64:	90 91 a2 01 	lds	r25, 0x01A2
    1f68:	a0 91 a3 01 	lds	r26, 0x01A3
    1f6c:	b0 91 a4 01 	lds	r27, 0x01A4
    1f70:	80 93 5a 01 	sts	0x015A, r24
    1f74:	90 93 5b 01 	sts	0x015B, r25
    1f78:	a0 93 5c 01 	sts	0x015C, r26
    1f7c:	b0 93 5d 01 	sts	0x015D, r27
	
	return (f_I_wy);
    1f80:	80 91 7b 01 	lds	r24, 0x017B
    1f84:	90 91 7c 01 	lds	r25, 0x017C
    1f88:	a0 91 7d 01 	lds	r26, 0x017D
    1f8c:	b0 91 7e 01 	lds	r27, 0x017E
}
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	2e 96       	adiw	r28, 0x0e	; 14
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	08 95       	ret

00001fb2 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
    1fba:	a5 e3       	ldi	r26, 0x35	; 53
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e5 e3       	ldi	r30, 0x35	; 53
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 60       	ori	r24, 0x08	; 8
    1fc6:	8c 93       	st	X, r24
    lcd_e_delay();
    1fc8:	00 c0       	rjmp	.+0      	; 0x1fca <toggle_e+0x18>
    lcd_e_low();
    1fca:	a5 e3       	ldi	r26, 0x35	; 53
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e3       	ldi	r30, 0x35	; 53
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	87 7f       	andi	r24, 0xF7	; 247
    1fd6:	8c 93       	st	X, r24
}
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <lcd_write+0x6>
    1fe4:	0f 92       	push	r0
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 23       	and	r24, r24
    1ff2:	41 f0       	breq	.+16     	; 0x2004 <lcd_write+0x26>
       lcd_rs_high();
    1ff4:	a5 e3       	ldi	r26, 0x35	; 53
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e5 e3       	ldi	r30, 0x35	; 53
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	84 60       	ori	r24, 0x04	; 4
    2000:	8c 93       	st	X, r24
    2002:	07 c0       	rjmp	.+14     	; 0x2012 <lcd_write+0x34>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    2004:	a5 e3       	ldi	r26, 0x35	; 53
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e5 e3       	ldi	r30, 0x35	; 53
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8b 7f       	andi	r24, 0xFB	; 251
    2010:	8c 93       	st	X, r24
    }
    lcd_rw_low();
    2012:	a5 e3       	ldi	r26, 0x35	; 53
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e3       	ldi	r30, 0x35	; 53
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8d 7f       	andi	r24, 0xFD	; 253
    201e:	8c 93       	st	X, r24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    2020:	a4 e3       	ldi	r26, 0x34	; 52
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e4 e3       	ldi	r30, 0x34	; 52
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	80 61       	ori	r24, 0x10	; 16
    202c:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    202e:	a4 e3       	ldi	r26, 0x34	; 52
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e4 e3       	ldi	r30, 0x34	; 52
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 62       	ori	r24, 0x20	; 32
    203a:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    203c:	a4 e3       	ldi	r26, 0x34	; 52
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e4 e3       	ldi	r30, 0x34	; 52
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 64       	ori	r24, 0x40	; 64
    2048:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    204a:	a4 e3       	ldi	r26, 0x34	; 52
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e4 e3       	ldi	r30, 0x34	; 52
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 68       	ori	r24, 0x80	; 128
    2056:	8c 93       	st	X, r24
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2058:	a5 e3       	ldi	r26, 0x35	; 53
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e3       	ldi	r30, 0x35	; 53
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	8f 77       	andi	r24, 0x7F	; 127
    2064:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2066:	a5 e3       	ldi	r26, 0x35	; 53
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e3       	ldi	r30, 0x35	; 53
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 7b       	andi	r24, 0xBF	; 191
    2072:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2074:	a5 e3       	ldi	r26, 0x35	; 53
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e3       	ldi	r30, 0x35	; 53
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 7d       	andi	r24, 0xDF	; 223
    2080:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2082:	a5 e3       	ldi	r26, 0x35	; 53
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e5 e3       	ldi	r30, 0x35	; 53
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8f 7e       	andi	r24, 0xEF	; 239
    208e:	8c 93       	st	X, r24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	88 23       	and	r24, r24
    2094:	3c f4       	brge	.+14     	; 0x20a4 <lcd_write+0xc6>
    2096:	a5 e3       	ldi	r26, 0x35	; 53
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e3       	ldi	r30, 0x35	; 53
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 68       	ori	r24, 0x80	; 128
    20a2:	8c 93       	st	X, r24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	80 74       	andi	r24, 0x40	; 64
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <lcd_write+0xe2>
    20b2:	a5 e3       	ldi	r26, 0x35	; 53
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e5 e3       	ldi	r30, 0x35	; 53
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 64       	ori	r24, 0x40	; 64
    20be:	8c 93       	st	X, r24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	80 72       	andi	r24, 0x20	; 32
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	39 f0       	breq	.+14     	; 0x20dc <lcd_write+0xfe>
    20ce:	a5 e3       	ldi	r26, 0x35	; 53
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e3       	ldi	r30, 0x35	; 53
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 62       	ori	r24, 0x20	; 32
    20da:	8c 93       	st	X, r24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	80 71       	andi	r24, 0x10	; 16
    20e4:	90 70       	andi	r25, 0x00	; 0
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	39 f0       	breq	.+14     	; 0x20f8 <lcd_write+0x11a>
    20ea:	a5 e3       	ldi	r26, 0x35	; 53
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e5 e3       	ldi	r30, 0x35	; 53
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 61       	ori	r24, 0x10	; 16
    20f6:	8c 93       	st	X, r24
        lcd_e_toggle();
    20f8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 77       	andi	r24, 0x7F	; 127
    2108:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 7b       	andi	r24, 0xBF	; 191
    2116:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2118:	a5 e3       	ldi	r26, 0x35	; 53
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e3       	ldi	r30, 0x35	; 53
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8f 7d       	andi	r24, 0xDF	; 223
    2124:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2126:	a5 e3       	ldi	r26, 0x35	; 53
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e5 e3       	ldi	r30, 0x35	; 53
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	8f 7e       	andi	r24, 0xEF	; 239
    2132:	8c 93       	st	X, r24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	88 70       	andi	r24, 0x08	; 8
    213c:	90 70       	andi	r25, 0x00	; 0
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	39 f0       	breq	.+14     	; 0x2150 <lcd_write+0x172>
    2142:	a5 e3       	ldi	r26, 0x35	; 53
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e5 e3       	ldi	r30, 0x35	; 53
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	8c 93       	st	X, r24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	84 70       	andi	r24, 0x04	; 4
    2158:	90 70       	andi	r25, 0x00	; 0
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	39 f0       	breq	.+14     	; 0x216c <lcd_write+0x18e>
    215e:	a5 e3       	ldi	r26, 0x35	; 53
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e3       	ldi	r30, 0x35	; 53
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 64       	ori	r24, 0x40	; 64
    216a:	8c 93       	st	X, r24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	82 70       	andi	r24, 0x02	; 2
    2174:	90 70       	andi	r25, 0x00	; 0
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	39 f0       	breq	.+14     	; 0x2188 <lcd_write+0x1aa>
    217a:	a5 e3       	ldi	r26, 0x35	; 53
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e5 e3       	ldi	r30, 0x35	; 53
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 62       	ori	r24, 0x20	; 32
    2186:	8c 93       	st	X, r24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	81 70       	andi	r24, 0x01	; 1
    2190:	90 70       	andi	r25, 0x00	; 0
    2192:	88 23       	and	r24, r24
    2194:	39 f0       	breq	.+14     	; 0x21a4 <lcd_write+0x1c6>
    2196:	a5 e3       	ldi	r26, 0x35	; 53
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e5 e3       	ldi	r30, 0x35	; 53
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 61       	ori	r24, 0x10	; 16
    21a2:	8c 93       	st	X, r24
        lcd_e_toggle();        
    21a4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    21a8:	a5 e3       	ldi	r26, 0x35	; 53
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e3       	ldi	r30, 0x35	; 53
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 61       	ori	r24, 0x10	; 16
    21b4:	8c 93       	st	X, r24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    21b6:	a5 e3       	ldi	r26, 0x35	; 53
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e3       	ldi	r30, 0x35	; 53
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	80 62       	ori	r24, 0x20	; 32
    21c2:	8c 93       	st	X, r24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    21c4:	a5 e3       	ldi	r26, 0x35	; 53
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e5 e3       	ldi	r30, 0x35	; 53
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 64       	ori	r24, 0x40	; 64
    21d0:	8c 93       	st	X, r24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    21d2:	a5 e3       	ldi	r26, 0x35	; 53
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e5 e3       	ldi	r30, 0x35	; 53
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	8c 93       	st	X, r24
    }
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <lcd_read+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	88 23       	and	r24, r24
    21fc:	41 f0       	breq	.+16     	; 0x220e <lcd_read+0x22>
        lcd_rs_high();                       /* RS=1: read data      */
    21fe:	a5 e3       	ldi	r26, 0x35	; 53
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e5 e3       	ldi	r30, 0x35	; 53
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	84 60       	ori	r24, 0x04	; 4
    220a:	8c 93       	st	X, r24
    220c:	07 c0       	rjmp	.+14     	; 0x221c <lcd_read+0x30>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    220e:	a5 e3       	ldi	r26, 0x35	; 53
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e3       	ldi	r30, 0x35	; 53
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8b 7f       	andi	r24, 0xFB	; 251
    221a:	8c 93       	st	X, r24
    lcd_rw_high();                           /* RW=1  read mode      */
    221c:	a5 e3       	ldi	r26, 0x35	; 53
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e5 e3       	ldi	r30, 0x35	; 53
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	82 60       	ori	r24, 0x02	; 2
    2228:	8c 93       	st	X, r24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
    222a:	a4 e3       	ldi	r26, 0x34	; 52
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e4 e3       	ldi	r30, 0x34	; 52
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
    2238:	a4 e3       	ldi	r26, 0x34	; 52
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e4 e3       	ldi	r30, 0x34	; 52
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 7d       	andi	r24, 0xDF	; 223
    2244:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
    2246:	a4 e3       	ldi	r26, 0x34	; 52
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e4 e3       	ldi	r30, 0x34	; 52
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 7b       	andi	r24, 0xBF	; 191
    2252:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
    2254:	a4 e3       	ldi	r26, 0x34	; 52
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e4 e3       	ldi	r30, 0x34	; 52
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	8c 93       	st	X, r24
                
        /* read high nibble first */
        lcd_e_high();
    2262:	a5 e3       	ldi	r26, 0x35	; 53
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e5 e3       	ldi	r30, 0x35	; 53
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	88 60       	ori	r24, 0x08	; 8
    226e:	8c 93       	st	X, r24
        lcd_e_delay();        
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <lcd_read+0x86>
        data = 0;
    2272:	19 82       	std	Y+1, r1	; 0x01
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
    2274:	e3 e3       	ldi	r30, 0x33	; 51
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	80 71       	andi	r24, 0x10	; 16
    2280:	90 70       	andi	r25, 0x00	; 0
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	19 f0       	breq	.+6      	; 0x228c <lcd_read+0xa0>
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	80 61       	ori	r24, 0x10	; 16
    228a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
    228c:	e3 e3       	ldi	r30, 0x33	; 51
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	80 72       	andi	r24, 0x20	; 32
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	19 f0       	breq	.+6      	; 0x22a4 <lcd_read+0xb8>
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	80 62       	ori	r24, 0x20	; 32
    22a2:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
    22a4:	e3 e3       	ldi	r30, 0x33	; 51
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	80 74       	andi	r24, 0x40	; 64
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	19 f0       	breq	.+6      	; 0x22bc <lcd_read+0xd0>
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	80 64       	ori	r24, 0x40	; 64
    22ba:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
    22bc:	e3 e3       	ldi	r30, 0x33	; 51
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <lcd_read+0xe0>
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	80 68       	ori	r24, 0x80	; 128
    22ca:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
    22cc:	a5 e3       	ldi	r26, 0x35	; 53
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e5 e3       	ldi	r30, 0x35	; 53
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	87 7f       	andi	r24, 0xF7	; 247
    22d8:	8c 93       	st	X, r24

        lcd_e_delay();                       /* Enable 500ns low       */
    22da:	00 c0       	rjmp	.+0      	; 0x22dc <lcd_read+0xf0>
    
        /* read low nibble */    
        lcd_e_high();
    22dc:	a5 e3       	ldi	r26, 0x35	; 53
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e3       	ldi	r30, 0x35	; 53
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	88 60       	ori	r24, 0x08	; 8
    22e8:	8c 93       	st	X, r24
        lcd_e_delay();
    22ea:	00 c0       	rjmp	.+0      	; 0x22ec <lcd_read+0x100>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
    22ec:	e3 e3       	ldi	r30, 0x33	; 51
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	80 71       	andi	r24, 0x10	; 16
    22f8:	90 70       	andi	r25, 0x00	; 0
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	19 f0       	breq	.+6      	; 0x2304 <lcd_read+0x118>
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	81 60       	ori	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
    2304:	e3 e3       	ldi	r30, 0x33	; 51
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	80 72       	andi	r24, 0x20	; 32
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	19 f0       	breq	.+6      	; 0x231c <lcd_read+0x130>
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	82 60       	ori	r24, 0x02	; 2
    231a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
    231c:	e3 e3       	ldi	r30, 0x33	; 51
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	80 74       	andi	r24, 0x40	; 64
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	19 f0       	breq	.+6      	; 0x2334 <lcd_read+0x148>
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	84 60       	ori	r24, 0x04	; 4
    2332:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
    2334:	e3 e3       	ldi	r30, 0x33	; 51
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	88 23       	and	r24, r24
    233c:	1c f4       	brge	.+6      	; 0x2344 <lcd_read+0x158>
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	88 60       	ori	r24, 0x08	; 8
    2342:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
    2344:	a5 e3       	ldi	r26, 0x35	; 53
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e5 e3       	ldi	r30, 0x35	; 53
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	87 7f       	andi	r24, 0xF7	; 247
    2350:	8c 93       	st	X, r24
    }
    return data;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	0e 94 f6 10 	call	0x21ec	; 0x21ec <lcd_read>
    236c:	88 23       	and	r24, r24
    236e:	dc f3       	brlt	.-10     	; 0x2366 <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <lcd_read>
    
}/* lcd_waitbusy */
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <_delayFourCycles+0x6>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	11 f4       	brne	.+4      	; 0x239e <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    239a:	00 c0       	rjmp	.+0      	; 0x239c <_delayFourCycles+0x18>
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <_delayFourCycles+0x1e>
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	0f 92       	push	r0
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    23c0:	0e 94 af 11 	call	0x235e	; 0x235e <lcd_waitbusy>
    lcd_write(cmd,0);
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <lcd_write>
}
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <lcd_gotoxy+0x6>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	88 23       	and	r24, r24
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	80 58       	subi	r24, 0x80	; 128
    23ec:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	80 54       	subi	r24, 0x40	; 64
    23f6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
    240c:	0e 94 af 11 	call	0x235e	; 0x235e <lcd_waitbusy>
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
}
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <lcd_putc+0x6>
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    244e:	0e 94 af 11 	call	0x235e	; 0x235e <lcd_waitbusy>
    2452:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	8a 30       	cpi	r24, 0x0A	; 10
    2458:	21 f4       	brne	.+8      	; 0x2462 <lcd_putc+0x20>
    {
        lcd_newline(pos);
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcd_newline>
    2460:	04 c0       	rjmp	.+8      	; 0x246a <lcd_putc+0x28>
        else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH )
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <lcd_write>
    }

}/* lcd_putc */
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <lcd_newline+0x6>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	80 34       	cpi	r24, 0x40	; 64
    2484:	18 f4       	brcc	.+6      	; 0x248c <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
    2486:	80 e4       	ldi	r24, 0x40	; 64
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	01 c0       	rjmp	.+2      	; 0x248e <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
    248c:	1a 82       	std	Y+2, r1	; 0x02
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	80 58       	subi	r24, 0x80	; 128
    2492:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>

}/* lcd_newline */
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <lcd_puts+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <lcd_puts+0x8>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <lcd_puts+0x18>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	0e 94 21 12 	call	0x2442	; 0x2442 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
    24b8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ba:	fa 81       	ldd	r31, Y+2	; 0x02
    24bc:	80 81       	ld	r24, Z
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	8c 83       	std	Y+4, r24	; 0x04
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	88 23       	and	r24, r24
    24c8:	11 f0       	breq	.+4      	; 0x24ce <lcd_puts+0x2e>
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	8c 83       	std	Y+4, r24	; 0x04
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	29 81       	ldd	r18, Y+1	; 0x01
    24d2:	3a 81       	ldd	r19, Y+2	; 0x02
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	3a 83       	std	Y+2, r19	; 0x02
    24da:	29 83       	std	Y+1, r18	; 0x01
    24dc:	88 23       	and	r24, r24
    24de:	49 f7       	brne	.-46     	; 0x24b2 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <lcd_puts_p+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <lcd_puts_p+0x8>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <lcd_puts_p+0xa>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	9d 83       	std	Y+5, r25	; 0x05
    24fe:	8c 83       	std	Y+4, r24	; 0x04
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <lcd_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    2502:	8e 81       	ldd	r24, Y+6	; 0x06
    2504:	0e 94 21 12 	call	0x2442	; 0x2442 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	9b 83       	std	Y+3, r25	; 0x03
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	9d 83       	std	Y+5, r25	; 0x05
    2518:	8c 83       	std	Y+4, r24	; 0x04
    251a:	ea 81       	ldd	r30, Y+2	; 0x02
    251c:	fb 81       	ldd	r31, Y+3	; 0x03
    251e:	84 91       	lpm	r24, Z+
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	8e 83       	std	Y+6, r24	; 0x06
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	88 23       	and	r24, r24
    252a:	59 f7       	brne	.-42     	; 0x2502 <lcd_puts_p+0x14>
        lcd_putc(c);
    }

}/* lcd_puts_p */
    252c:	26 96       	adiw	r28, 0x06	; 6
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	0f 92       	push	r0
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	89 83       	std	Y+1, r24	; 0x01
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    254a:	a4 e3       	ldi	r26, 0x34	; 52
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e4 e3       	ldi	r30, 0x34	; 52
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	84 60       	ori	r24, 0x04	; 4
    2556:	8c 93       	st	X, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    2558:	a4 e3       	ldi	r26, 0x34	; 52
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e4 e3       	ldi	r30, 0x34	; 52
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	82 60       	ori	r24, 0x02	; 2
    2564:	8c 93       	st	X, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    2566:	a4 e3       	ldi	r26, 0x34	; 52
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e4 e3       	ldi	r30, 0x34	; 52
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 60       	ori	r24, 0x08	; 8
    2572:	8c 93       	st	X, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    2574:	a4 e3       	ldi	r26, 0x34	; 52
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e4 e3       	ldi	r30, 0x34	; 52
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	80 61       	ori	r24, 0x10	; 16
    2580:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    2582:	a4 e3       	ldi	r26, 0x34	; 52
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e4 e3       	ldi	r30, 0x34	; 52
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	80 62       	ori	r24, 0x20	; 32
    258e:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    2590:	a4 e3       	ldi	r26, 0x34	; 52
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e4 e3       	ldi	r30, 0x34	; 52
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 64       	ori	r24, 0x40	; 64
    259c:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    259e:	a4 e3       	ldi	r26, 0x34	; 52
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e4 e3       	ldi	r30, 0x34	; 52
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	80 68       	ori	r24, 0x80	; 128
    25aa:	8c 93       	st	X, r24
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    25ac:	80 e8       	ldi	r24, 0x80	; 128
    25ae:	9e e3       	ldi	r25, 0x3E	; 62
    25b0:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    25b4:	a5 e3       	ldi	r26, 0x35	; 53
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e5 e3       	ldi	r30, 0x35	; 53
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	8c 93       	st	X, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    25c2:	a5 e3       	ldi	r26, 0x35	; 53
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e3       	ldi	r30, 0x35	; 53
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	80 61       	ori	r24, 0x10	; 16
    25ce:	8c 93       	st	X, r24
    lcd_e_toggle();
    25d0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
    25d4:	80 e8       	ldi	r24, 0x80	; 128
    25d6:	93 e1       	ldi	r25, 0x13	; 19
    25d8:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
    25dc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    25e0:	80 e4       	ldi	r24, 0x40	; 64
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    25e8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    25ec:	80 e4       	ldi	r24, 0x40	; 64
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    25f4:	a5 e3       	ldi	r26, 0x35	; 53
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e5 e3       	ldi	r30, 0x35	; 53
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 7e       	andi	r24, 0xEF	; 239
    2600:	8c 93       	st	X, r24
    lcd_e_toggle();
    2602:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <toggle_e>
    delay(64);           /* some displays need this additional delay */
    2606:	80 e4       	ldi	r24, 0x40	; 64
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 c2 11 	call	0x2384	; 0x2384 <_delayFourCycles>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    260e:	88 e2       	ldi	r24, 0x28	; 40
    2610:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    261a:	0e 94 0d 12 	call	0x241a	; 0x241a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    261e:	86 e0       	ldi	r24, 0x06	; 6
    2620:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_command>

}/* lcd_init */
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <utoa>:
    2632:	fb 01       	movw	r30, r22
    2634:	9f 01       	movw	r18, r30
    2636:	42 30       	cpi	r20, 0x02	; 2
    2638:	74 f0       	brlt	.+28     	; 0x2656 <utoa+0x24>
    263a:	45 32       	cpi	r20, 0x25	; 37
    263c:	64 f4       	brge	.+24     	; 0x2656 <utoa+0x24>
    263e:	64 2f       	mov	r22, r20
    2640:	77 27       	eor	r23, r23
    2642:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__udivmodhi4>
    2646:	80 5d       	subi	r24, 0xD0	; 208
    2648:	8a 33       	cpi	r24, 0x3A	; 58
    264a:	0c f0       	brlt	.+2      	; 0x264e <utoa+0x1c>
    264c:	89 5d       	subi	r24, 0xD9	; 217
    264e:	81 93       	st	Z+, r24
    2650:	cb 01       	movw	r24, r22
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	a1 f7       	brne	.-24     	; 0x263e <utoa+0xc>
    2656:	10 82       	st	Z, r1
    2658:	c9 01       	movw	r24, r18
    265a:	0c 94 2f 13 	jmp	0x265e	; 0x265e <strrev>

0000265e <strrev>:
    265e:	dc 01       	movw	r26, r24
    2660:	fc 01       	movw	r30, r24
    2662:	67 2f       	mov	r22, r23
    2664:	71 91       	ld	r23, Z+
    2666:	77 23       	and	r23, r23
    2668:	e1 f7       	brne	.-8      	; 0x2662 <strrev+0x4>
    266a:	32 97       	sbiw	r30, 0x02	; 2
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <strrev+0x18>
    266e:	7c 91       	ld	r23, X
    2670:	6d 93       	st	X+, r22
    2672:	70 83       	st	Z, r23
    2674:	62 91       	ld	r22, -Z
    2676:	ae 17       	cp	r26, r30
    2678:	bf 07       	cpc	r27, r31
    267a:	c8 f3       	brcs	.-14     	; 0x266e <strrev+0x10>
    267c:	08 95       	ret

0000267e <__subsf3>:
    267e:	50 58       	subi	r21, 0x80	; 128

00002680 <__addsf3>:
    2680:	bb 27       	eor	r27, r27
    2682:	aa 27       	eor	r26, r26
    2684:	0e d0       	rcall	.+28     	; 0x26a2 <__addsf3x>
    2686:	75 c1       	rjmp	.+746    	; 0x2972 <__fp_round>
    2688:	66 d1       	rcall	.+716    	; 0x2956 <__fp_pscA>
    268a:	30 f0       	brcs	.+12     	; 0x2698 <__addsf3+0x18>
    268c:	6b d1       	rcall	.+726    	; 0x2964 <__fp_pscB>
    268e:	20 f0       	brcs	.+8      	; 0x2698 <__addsf3+0x18>
    2690:	31 f4       	brne	.+12     	; 0x269e <__addsf3+0x1e>
    2692:	9f 3f       	cpi	r25, 0xFF	; 255
    2694:	11 f4       	brne	.+4      	; 0x269a <__addsf3+0x1a>
    2696:	1e f4       	brtc	.+6      	; 0x269e <__addsf3+0x1e>
    2698:	5b c1       	rjmp	.+694    	; 0x2950 <__fp_nan>
    269a:	0e f4       	brtc	.+2      	; 0x269e <__addsf3+0x1e>
    269c:	e0 95       	com	r30
    269e:	e7 fb       	bst	r30, 7
    26a0:	51 c1       	rjmp	.+674    	; 0x2944 <__fp_inf>

000026a2 <__addsf3x>:
    26a2:	e9 2f       	mov	r30, r25
    26a4:	77 d1       	rcall	.+750    	; 0x2994 <__fp_split3>
    26a6:	80 f3       	brcs	.-32     	; 0x2688 <__addsf3+0x8>
    26a8:	ba 17       	cp	r27, r26
    26aa:	62 07       	cpc	r22, r18
    26ac:	73 07       	cpc	r23, r19
    26ae:	84 07       	cpc	r24, r20
    26b0:	95 07       	cpc	r25, r21
    26b2:	18 f0       	brcs	.+6      	; 0x26ba <__addsf3x+0x18>
    26b4:	71 f4       	brne	.+28     	; 0x26d2 <__addsf3x+0x30>
    26b6:	9e f5       	brtc	.+102    	; 0x271e <__addsf3x+0x7c>
    26b8:	8f c1       	rjmp	.+798    	; 0x29d8 <__fp_zero>
    26ba:	0e f4       	brtc	.+2      	; 0x26be <__addsf3x+0x1c>
    26bc:	e0 95       	com	r30
    26be:	0b 2e       	mov	r0, r27
    26c0:	ba 2f       	mov	r27, r26
    26c2:	a0 2d       	mov	r26, r0
    26c4:	0b 01       	movw	r0, r22
    26c6:	b9 01       	movw	r22, r18
    26c8:	90 01       	movw	r18, r0
    26ca:	0c 01       	movw	r0, r24
    26cc:	ca 01       	movw	r24, r20
    26ce:	a0 01       	movw	r20, r0
    26d0:	11 24       	eor	r1, r1
    26d2:	ff 27       	eor	r31, r31
    26d4:	59 1b       	sub	r21, r25
    26d6:	99 f0       	breq	.+38     	; 0x26fe <__addsf3x+0x5c>
    26d8:	59 3f       	cpi	r21, 0xF9	; 249
    26da:	50 f4       	brcc	.+20     	; 0x26f0 <__addsf3x+0x4e>
    26dc:	50 3e       	cpi	r21, 0xE0	; 224
    26de:	68 f1       	brcs	.+90     	; 0x273a <__addsf3x+0x98>
    26e0:	1a 16       	cp	r1, r26
    26e2:	f0 40       	sbci	r31, 0x00	; 0
    26e4:	a2 2f       	mov	r26, r18
    26e6:	23 2f       	mov	r18, r19
    26e8:	34 2f       	mov	r19, r20
    26ea:	44 27       	eor	r20, r20
    26ec:	58 5f       	subi	r21, 0xF8	; 248
    26ee:	f3 cf       	rjmp	.-26     	; 0x26d6 <__addsf3x+0x34>
    26f0:	46 95       	lsr	r20
    26f2:	37 95       	ror	r19
    26f4:	27 95       	ror	r18
    26f6:	a7 95       	ror	r26
    26f8:	f0 40       	sbci	r31, 0x00	; 0
    26fa:	53 95       	inc	r21
    26fc:	c9 f7       	brne	.-14     	; 0x26f0 <__addsf3x+0x4e>
    26fe:	7e f4       	brtc	.+30     	; 0x271e <__addsf3x+0x7c>
    2700:	1f 16       	cp	r1, r31
    2702:	ba 0b       	sbc	r27, r26
    2704:	62 0b       	sbc	r22, r18
    2706:	73 0b       	sbc	r23, r19
    2708:	84 0b       	sbc	r24, r20
    270a:	ba f0       	brmi	.+46     	; 0x273a <__addsf3x+0x98>
    270c:	91 50       	subi	r25, 0x01	; 1
    270e:	a1 f0       	breq	.+40     	; 0x2738 <__addsf3x+0x96>
    2710:	ff 0f       	add	r31, r31
    2712:	bb 1f       	adc	r27, r27
    2714:	66 1f       	adc	r22, r22
    2716:	77 1f       	adc	r23, r23
    2718:	88 1f       	adc	r24, r24
    271a:	c2 f7       	brpl	.-16     	; 0x270c <__addsf3x+0x6a>
    271c:	0e c0       	rjmp	.+28     	; 0x273a <__addsf3x+0x98>
    271e:	ba 0f       	add	r27, r26
    2720:	62 1f       	adc	r22, r18
    2722:	73 1f       	adc	r23, r19
    2724:	84 1f       	adc	r24, r20
    2726:	48 f4       	brcc	.+18     	; 0x273a <__addsf3x+0x98>
    2728:	87 95       	ror	r24
    272a:	77 95       	ror	r23
    272c:	67 95       	ror	r22
    272e:	b7 95       	ror	r27
    2730:	f7 95       	ror	r31
    2732:	9e 3f       	cpi	r25, 0xFE	; 254
    2734:	08 f0       	brcs	.+2      	; 0x2738 <__addsf3x+0x96>
    2736:	b3 cf       	rjmp	.-154    	; 0x269e <__addsf3+0x1e>
    2738:	93 95       	inc	r25
    273a:	88 0f       	add	r24, r24
    273c:	08 f0       	brcs	.+2      	; 0x2740 <__addsf3x+0x9e>
    273e:	99 27       	eor	r25, r25
    2740:	ee 0f       	add	r30, r30
    2742:	97 95       	ror	r25
    2744:	87 95       	ror	r24
    2746:	08 95       	ret

00002748 <__cmpsf2>:
    2748:	d9 d0       	rcall	.+434    	; 0x28fc <__fp_cmp>
    274a:	08 f4       	brcc	.+2      	; 0x274e <__cmpsf2+0x6>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	08 95       	ret

00002750 <__divsf3>:
    2750:	0c d0       	rcall	.+24     	; 0x276a <__divsf3x>
    2752:	0f c1       	rjmp	.+542    	; 0x2972 <__fp_round>
    2754:	07 d1       	rcall	.+526    	; 0x2964 <__fp_pscB>
    2756:	40 f0       	brcs	.+16     	; 0x2768 <__divsf3+0x18>
    2758:	fe d0       	rcall	.+508    	; 0x2956 <__fp_pscA>
    275a:	30 f0       	brcs	.+12     	; 0x2768 <__divsf3+0x18>
    275c:	21 f4       	brne	.+8      	; 0x2766 <__divsf3+0x16>
    275e:	5f 3f       	cpi	r21, 0xFF	; 255
    2760:	19 f0       	breq	.+6      	; 0x2768 <__divsf3+0x18>
    2762:	f0 c0       	rjmp	.+480    	; 0x2944 <__fp_inf>
    2764:	51 11       	cpse	r21, r1
    2766:	39 c1       	rjmp	.+626    	; 0x29da <__fp_szero>
    2768:	f3 c0       	rjmp	.+486    	; 0x2950 <__fp_nan>

0000276a <__divsf3x>:
    276a:	14 d1       	rcall	.+552    	; 0x2994 <__fp_split3>
    276c:	98 f3       	brcs	.-26     	; 0x2754 <__divsf3+0x4>

0000276e <__divsf3_pse>:
    276e:	99 23       	and	r25, r25
    2770:	c9 f3       	breq	.-14     	; 0x2764 <__divsf3+0x14>
    2772:	55 23       	and	r21, r21
    2774:	b1 f3       	breq	.-20     	; 0x2762 <__divsf3+0x12>
    2776:	95 1b       	sub	r25, r21
    2778:	55 0b       	sbc	r21, r21
    277a:	bb 27       	eor	r27, r27
    277c:	aa 27       	eor	r26, r26
    277e:	62 17       	cp	r22, r18
    2780:	73 07       	cpc	r23, r19
    2782:	84 07       	cpc	r24, r20
    2784:	38 f0       	brcs	.+14     	; 0x2794 <__divsf3_pse+0x26>
    2786:	9f 5f       	subi	r25, 0xFF	; 255
    2788:	5f 4f       	sbci	r21, 0xFF	; 255
    278a:	22 0f       	add	r18, r18
    278c:	33 1f       	adc	r19, r19
    278e:	44 1f       	adc	r20, r20
    2790:	aa 1f       	adc	r26, r26
    2792:	a9 f3       	breq	.-22     	; 0x277e <__divsf3_pse+0x10>
    2794:	33 d0       	rcall	.+102    	; 0x27fc <__divsf3_pse+0x8e>
    2796:	0e 2e       	mov	r0, r30
    2798:	3a f0       	brmi	.+14     	; 0x27a8 <__divsf3_pse+0x3a>
    279a:	e0 e8       	ldi	r30, 0x80	; 128
    279c:	30 d0       	rcall	.+96     	; 0x27fe <__divsf3_pse+0x90>
    279e:	91 50       	subi	r25, 0x01	; 1
    27a0:	50 40       	sbci	r21, 0x00	; 0
    27a2:	e6 95       	lsr	r30
    27a4:	00 1c       	adc	r0, r0
    27a6:	ca f7       	brpl	.-14     	; 0x279a <__divsf3_pse+0x2c>
    27a8:	29 d0       	rcall	.+82     	; 0x27fc <__divsf3_pse+0x8e>
    27aa:	fe 2f       	mov	r31, r30
    27ac:	27 d0       	rcall	.+78     	; 0x27fc <__divsf3_pse+0x8e>
    27ae:	66 0f       	add	r22, r22
    27b0:	77 1f       	adc	r23, r23
    27b2:	88 1f       	adc	r24, r24
    27b4:	bb 1f       	adc	r27, r27
    27b6:	26 17       	cp	r18, r22
    27b8:	37 07       	cpc	r19, r23
    27ba:	48 07       	cpc	r20, r24
    27bc:	ab 07       	cpc	r26, r27
    27be:	b0 e8       	ldi	r27, 0x80	; 128
    27c0:	09 f0       	breq	.+2      	; 0x27c4 <__divsf3_pse+0x56>
    27c2:	bb 0b       	sbc	r27, r27
    27c4:	80 2d       	mov	r24, r0
    27c6:	bf 01       	movw	r22, r30
    27c8:	ff 27       	eor	r31, r31
    27ca:	93 58       	subi	r25, 0x83	; 131
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
    27ce:	2a f0       	brmi	.+10     	; 0x27da <__divsf3_pse+0x6c>
    27d0:	9e 3f       	cpi	r25, 0xFE	; 254
    27d2:	51 05       	cpc	r21, r1
    27d4:	68 f0       	brcs	.+26     	; 0x27f0 <__divsf3_pse+0x82>
    27d6:	b6 c0       	rjmp	.+364    	; 0x2944 <__fp_inf>
    27d8:	00 c1       	rjmp	.+512    	; 0x29da <__fp_szero>
    27da:	5f 3f       	cpi	r21, 0xFF	; 255
    27dc:	ec f3       	brlt	.-6      	; 0x27d8 <__divsf3_pse+0x6a>
    27de:	98 3e       	cpi	r25, 0xE8	; 232
    27e0:	dc f3       	brlt	.-10     	; 0x27d8 <__divsf3_pse+0x6a>
    27e2:	86 95       	lsr	r24
    27e4:	77 95       	ror	r23
    27e6:	67 95       	ror	r22
    27e8:	b7 95       	ror	r27
    27ea:	f7 95       	ror	r31
    27ec:	9f 5f       	subi	r25, 0xFF	; 255
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__divsf3_pse+0x74>
    27f0:	88 0f       	add	r24, r24
    27f2:	91 1d       	adc	r25, r1
    27f4:	96 95       	lsr	r25
    27f6:	87 95       	ror	r24
    27f8:	97 f9       	bld	r25, 7
    27fa:	08 95       	ret
    27fc:	e1 e0       	ldi	r30, 0x01	; 1
    27fe:	66 0f       	add	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	bb 1f       	adc	r27, r27
    2806:	62 17       	cp	r22, r18
    2808:	73 07       	cpc	r23, r19
    280a:	84 07       	cpc	r24, r20
    280c:	ba 07       	cpc	r27, r26
    280e:	20 f0       	brcs	.+8      	; 0x2818 <__divsf3_pse+0xaa>
    2810:	62 1b       	sub	r22, r18
    2812:	73 0b       	sbc	r23, r19
    2814:	84 0b       	sbc	r24, r20
    2816:	ba 0b       	sbc	r27, r26
    2818:	ee 1f       	adc	r30, r30
    281a:	88 f7       	brcc	.-30     	; 0x27fe <__divsf3_pse+0x90>
    281c:	e0 95       	com	r30
    281e:	08 95       	ret

00002820 <__fixsfsi>:
    2820:	04 d0       	rcall	.+8      	; 0x282a <__fixunssfsi>
    2822:	68 94       	set
    2824:	b1 11       	cpse	r27, r1
    2826:	d9 c0       	rjmp	.+434    	; 0x29da <__fp_szero>
    2828:	08 95       	ret

0000282a <__fixunssfsi>:
    282a:	bc d0       	rcall	.+376    	; 0x29a4 <__fp_splitA>
    282c:	88 f0       	brcs	.+34     	; 0x2850 <__fixunssfsi+0x26>
    282e:	9f 57       	subi	r25, 0x7F	; 127
    2830:	90 f0       	brcs	.+36     	; 0x2856 <__fixunssfsi+0x2c>
    2832:	b9 2f       	mov	r27, r25
    2834:	99 27       	eor	r25, r25
    2836:	b7 51       	subi	r27, 0x17	; 23
    2838:	a0 f0       	brcs	.+40     	; 0x2862 <__fixunssfsi+0x38>
    283a:	d1 f0       	breq	.+52     	; 0x2870 <__fixunssfsi+0x46>
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	1a f0       	brmi	.+6      	; 0x284c <__fixunssfsi+0x22>
    2846:	ba 95       	dec	r27
    2848:	c9 f7       	brne	.-14     	; 0x283c <__fixunssfsi+0x12>
    284a:	12 c0       	rjmp	.+36     	; 0x2870 <__fixunssfsi+0x46>
    284c:	b1 30       	cpi	r27, 0x01	; 1
    284e:	81 f0       	breq	.+32     	; 0x2870 <__fixunssfsi+0x46>
    2850:	c3 d0       	rcall	.+390    	; 0x29d8 <__fp_zero>
    2852:	b1 e0       	ldi	r27, 0x01	; 1
    2854:	08 95       	ret
    2856:	c0 c0       	rjmp	.+384    	; 0x29d8 <__fp_zero>
    2858:	67 2f       	mov	r22, r23
    285a:	78 2f       	mov	r23, r24
    285c:	88 27       	eor	r24, r24
    285e:	b8 5f       	subi	r27, 0xF8	; 248
    2860:	39 f0       	breq	.+14     	; 0x2870 <__fixunssfsi+0x46>
    2862:	b9 3f       	cpi	r27, 0xF9	; 249
    2864:	cc f3       	brlt	.-14     	; 0x2858 <__fixunssfsi+0x2e>
    2866:	86 95       	lsr	r24
    2868:	77 95       	ror	r23
    286a:	67 95       	ror	r22
    286c:	b3 95       	inc	r27
    286e:	d9 f7       	brne	.-10     	; 0x2866 <__fixunssfsi+0x3c>
    2870:	3e f4       	brtc	.+14     	; 0x2880 <__fixunssfsi+0x56>
    2872:	90 95       	com	r25
    2874:	80 95       	com	r24
    2876:	70 95       	com	r23
    2878:	61 95       	neg	r22
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	8f 4f       	sbci	r24, 0xFF	; 255
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	08 95       	ret

00002882 <__floatunsisf>:
    2882:	e8 94       	clt
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <__floatsisf+0x12>

00002886 <__floatsisf>:
    2886:	97 fb       	bst	r25, 7
    2888:	3e f4       	brtc	.+14     	; 0x2898 <__floatsisf+0x12>
    288a:	90 95       	com	r25
    288c:	80 95       	com	r24
    288e:	70 95       	com	r23
    2890:	61 95       	neg	r22
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	8f 4f       	sbci	r24, 0xFF	; 255
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	99 23       	and	r25, r25
    289a:	a9 f0       	breq	.+42     	; 0x28c6 <__floatsisf+0x40>
    289c:	f9 2f       	mov	r31, r25
    289e:	96 e9       	ldi	r25, 0x96	; 150
    28a0:	bb 27       	eor	r27, r27
    28a2:	93 95       	inc	r25
    28a4:	f6 95       	lsr	r31
    28a6:	87 95       	ror	r24
    28a8:	77 95       	ror	r23
    28aa:	67 95       	ror	r22
    28ac:	b7 95       	ror	r27
    28ae:	f1 11       	cpse	r31, r1
    28b0:	f8 cf       	rjmp	.-16     	; 0x28a2 <__floatsisf+0x1c>
    28b2:	fa f4       	brpl	.+62     	; 0x28f2 <__floatsisf+0x6c>
    28b4:	bb 0f       	add	r27, r27
    28b6:	11 f4       	brne	.+4      	; 0x28bc <__floatsisf+0x36>
    28b8:	60 ff       	sbrs	r22, 0
    28ba:	1b c0       	rjmp	.+54     	; 0x28f2 <__floatsisf+0x6c>
    28bc:	6f 5f       	subi	r22, 0xFF	; 255
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	8f 4f       	sbci	r24, 0xFF	; 255
    28c2:	9f 4f       	sbci	r25, 0xFF	; 255
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <__floatsisf+0x6c>
    28c6:	88 23       	and	r24, r24
    28c8:	11 f0       	breq	.+4      	; 0x28ce <__floatsisf+0x48>
    28ca:	96 e9       	ldi	r25, 0x96	; 150
    28cc:	11 c0       	rjmp	.+34     	; 0x28f0 <__floatsisf+0x6a>
    28ce:	77 23       	and	r23, r23
    28d0:	21 f0       	breq	.+8      	; 0x28da <__floatsisf+0x54>
    28d2:	9e e8       	ldi	r25, 0x8E	; 142
    28d4:	87 2f       	mov	r24, r23
    28d6:	76 2f       	mov	r23, r22
    28d8:	05 c0       	rjmp	.+10     	; 0x28e4 <__floatsisf+0x5e>
    28da:	66 23       	and	r22, r22
    28dc:	71 f0       	breq	.+28     	; 0x28fa <__floatsisf+0x74>
    28de:	96 e8       	ldi	r25, 0x86	; 134
    28e0:	86 2f       	mov	r24, r22
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	2a f0       	brmi	.+10     	; 0x28f2 <__floatsisf+0x6c>
    28e8:	9a 95       	dec	r25
    28ea:	66 0f       	add	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	88 1f       	adc	r24, r24
    28f0:	da f7       	brpl	.-10     	; 0x28e8 <__floatsisf+0x62>
    28f2:	88 0f       	add	r24, r24
    28f4:	96 95       	lsr	r25
    28f6:	87 95       	ror	r24
    28f8:	97 f9       	bld	r25, 7
    28fa:	08 95       	ret

000028fc <__fp_cmp>:
    28fc:	99 0f       	add	r25, r25
    28fe:	00 08       	sbc	r0, r0
    2900:	55 0f       	add	r21, r21
    2902:	aa 0b       	sbc	r26, r26
    2904:	e0 e8       	ldi	r30, 0x80	; 128
    2906:	fe ef       	ldi	r31, 0xFE	; 254
    2908:	16 16       	cp	r1, r22
    290a:	17 06       	cpc	r1, r23
    290c:	e8 07       	cpc	r30, r24
    290e:	f9 07       	cpc	r31, r25
    2910:	c0 f0       	brcs	.+48     	; 0x2942 <__fp_cmp+0x46>
    2912:	12 16       	cp	r1, r18
    2914:	13 06       	cpc	r1, r19
    2916:	e4 07       	cpc	r30, r20
    2918:	f5 07       	cpc	r31, r21
    291a:	98 f0       	brcs	.+38     	; 0x2942 <__fp_cmp+0x46>
    291c:	62 1b       	sub	r22, r18
    291e:	73 0b       	sbc	r23, r19
    2920:	84 0b       	sbc	r24, r20
    2922:	95 0b       	sbc	r25, r21
    2924:	39 f4       	brne	.+14     	; 0x2934 <__fp_cmp+0x38>
    2926:	0a 26       	eor	r0, r26
    2928:	61 f0       	breq	.+24     	; 0x2942 <__fp_cmp+0x46>
    292a:	23 2b       	or	r18, r19
    292c:	24 2b       	or	r18, r20
    292e:	25 2b       	or	r18, r21
    2930:	21 f4       	brne	.+8      	; 0x293a <__fp_cmp+0x3e>
    2932:	08 95       	ret
    2934:	0a 26       	eor	r0, r26
    2936:	09 f4       	brne	.+2      	; 0x293a <__fp_cmp+0x3e>
    2938:	a1 40       	sbci	r26, 0x01	; 1
    293a:	a6 95       	lsr	r26
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	81 1d       	adc	r24, r1
    2940:	81 1d       	adc	r24, r1
    2942:	08 95       	ret

00002944 <__fp_inf>:
    2944:	97 f9       	bld	r25, 7
    2946:	9f 67       	ori	r25, 0x7F	; 127
    2948:	80 e8       	ldi	r24, 0x80	; 128
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	08 95       	ret

00002950 <__fp_nan>:
    2950:	9f ef       	ldi	r25, 0xFF	; 255
    2952:	80 ec       	ldi	r24, 0xC0	; 192
    2954:	08 95       	ret

00002956 <__fp_pscA>:
    2956:	00 24       	eor	r0, r0
    2958:	0a 94       	dec	r0
    295a:	16 16       	cp	r1, r22
    295c:	17 06       	cpc	r1, r23
    295e:	18 06       	cpc	r1, r24
    2960:	09 06       	cpc	r0, r25
    2962:	08 95       	ret

00002964 <__fp_pscB>:
    2964:	00 24       	eor	r0, r0
    2966:	0a 94       	dec	r0
    2968:	12 16       	cp	r1, r18
    296a:	13 06       	cpc	r1, r19
    296c:	14 06       	cpc	r1, r20
    296e:	05 06       	cpc	r0, r21
    2970:	08 95       	ret

00002972 <__fp_round>:
    2972:	09 2e       	mov	r0, r25
    2974:	03 94       	inc	r0
    2976:	00 0c       	add	r0, r0
    2978:	11 f4       	brne	.+4      	; 0x297e <__fp_round+0xc>
    297a:	88 23       	and	r24, r24
    297c:	52 f0       	brmi	.+20     	; 0x2992 <__fp_round+0x20>
    297e:	bb 0f       	add	r27, r27
    2980:	40 f4       	brcc	.+16     	; 0x2992 <__fp_round+0x20>
    2982:	bf 2b       	or	r27, r31
    2984:	11 f4       	brne	.+4      	; 0x298a <__fp_round+0x18>
    2986:	60 ff       	sbrs	r22, 0
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <__fp_round+0x20>
    298a:	6f 5f       	subi	r22, 0xFF	; 255
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	8f 4f       	sbci	r24, 0xFF	; 255
    2990:	9f 4f       	sbci	r25, 0xFF	; 255
    2992:	08 95       	ret

00002994 <__fp_split3>:
    2994:	57 fd       	sbrc	r21, 7
    2996:	90 58       	subi	r25, 0x80	; 128
    2998:	44 0f       	add	r20, r20
    299a:	55 1f       	adc	r21, r21
    299c:	59 f0       	breq	.+22     	; 0x29b4 <__fp_splitA+0x10>
    299e:	5f 3f       	cpi	r21, 0xFF	; 255
    29a0:	71 f0       	breq	.+28     	; 0x29be <__fp_splitA+0x1a>
    29a2:	47 95       	ror	r20

000029a4 <__fp_splitA>:
    29a4:	88 0f       	add	r24, r24
    29a6:	97 fb       	bst	r25, 7
    29a8:	99 1f       	adc	r25, r25
    29aa:	61 f0       	breq	.+24     	; 0x29c4 <__fp_splitA+0x20>
    29ac:	9f 3f       	cpi	r25, 0xFF	; 255
    29ae:	79 f0       	breq	.+30     	; 0x29ce <__fp_splitA+0x2a>
    29b0:	87 95       	ror	r24
    29b2:	08 95       	ret
    29b4:	12 16       	cp	r1, r18
    29b6:	13 06       	cpc	r1, r19
    29b8:	14 06       	cpc	r1, r20
    29ba:	55 1f       	adc	r21, r21
    29bc:	f2 cf       	rjmp	.-28     	; 0x29a2 <__fp_split3+0xe>
    29be:	46 95       	lsr	r20
    29c0:	f1 df       	rcall	.-30     	; 0x29a4 <__fp_splitA>
    29c2:	08 c0       	rjmp	.+16     	; 0x29d4 <__fp_splitA+0x30>
    29c4:	16 16       	cp	r1, r22
    29c6:	17 06       	cpc	r1, r23
    29c8:	18 06       	cpc	r1, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	f1 cf       	rjmp	.-30     	; 0x29b0 <__fp_splitA+0xc>
    29ce:	86 95       	lsr	r24
    29d0:	71 05       	cpc	r23, r1
    29d2:	61 05       	cpc	r22, r1
    29d4:	08 94       	sec
    29d6:	08 95       	ret

000029d8 <__fp_zero>:
    29d8:	e8 94       	clt

000029da <__fp_szero>:
    29da:	bb 27       	eor	r27, r27
    29dc:	66 27       	eor	r22, r22
    29de:	77 27       	eor	r23, r23
    29e0:	cb 01       	movw	r24, r22
    29e2:	97 f9       	bld	r25, 7
    29e4:	08 95       	ret

000029e6 <__gesf2>:
    29e6:	8a df       	rcall	.-236    	; 0x28fc <__fp_cmp>
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <__gesf2+0x6>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	08 95       	ret

000029ee <__mulsf3>:
    29ee:	0b d0       	rcall	.+22     	; 0x2a06 <__mulsf3x>
    29f0:	c0 cf       	rjmp	.-128    	; 0x2972 <__fp_round>
    29f2:	b1 df       	rcall	.-158    	; 0x2956 <__fp_pscA>
    29f4:	28 f0       	brcs	.+10     	; 0x2a00 <__mulsf3+0x12>
    29f6:	b6 df       	rcall	.-148    	; 0x2964 <__fp_pscB>
    29f8:	18 f0       	brcs	.+6      	; 0x2a00 <__mulsf3+0x12>
    29fa:	95 23       	and	r25, r21
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <__mulsf3+0x12>
    29fe:	a2 cf       	rjmp	.-188    	; 0x2944 <__fp_inf>
    2a00:	a7 cf       	rjmp	.-178    	; 0x2950 <__fp_nan>
    2a02:	11 24       	eor	r1, r1
    2a04:	ea cf       	rjmp	.-44     	; 0x29da <__fp_szero>

00002a06 <__mulsf3x>:
    2a06:	c6 df       	rcall	.-116    	; 0x2994 <__fp_split3>
    2a08:	a0 f3       	brcs	.-24     	; 0x29f2 <__mulsf3+0x4>

00002a0a <__mulsf3_pse>:
    2a0a:	95 9f       	mul	r25, r21
    2a0c:	d1 f3       	breq	.-12     	; 0x2a02 <__mulsf3+0x14>
    2a0e:	95 0f       	add	r25, r21
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	55 1f       	adc	r21, r21
    2a14:	62 9f       	mul	r22, r18
    2a16:	f0 01       	movw	r30, r0
    2a18:	72 9f       	mul	r23, r18
    2a1a:	bb 27       	eor	r27, r27
    2a1c:	f0 0d       	add	r31, r0
    2a1e:	b1 1d       	adc	r27, r1
    2a20:	63 9f       	mul	r22, r19
    2a22:	aa 27       	eor	r26, r26
    2a24:	f0 0d       	add	r31, r0
    2a26:	b1 1d       	adc	r27, r1
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	64 9f       	mul	r22, r20
    2a2c:	66 27       	eor	r22, r22
    2a2e:	b0 0d       	add	r27, r0
    2a30:	a1 1d       	adc	r26, r1
    2a32:	66 1f       	adc	r22, r22
    2a34:	82 9f       	mul	r24, r18
    2a36:	22 27       	eor	r18, r18
    2a38:	b0 0d       	add	r27, r0
    2a3a:	a1 1d       	adc	r26, r1
    2a3c:	62 1f       	adc	r22, r18
    2a3e:	73 9f       	mul	r23, r19
    2a40:	b0 0d       	add	r27, r0
    2a42:	a1 1d       	adc	r26, r1
    2a44:	62 1f       	adc	r22, r18
    2a46:	83 9f       	mul	r24, r19
    2a48:	a0 0d       	add	r26, r0
    2a4a:	61 1d       	adc	r22, r1
    2a4c:	22 1f       	adc	r18, r18
    2a4e:	74 9f       	mul	r23, r20
    2a50:	33 27       	eor	r19, r19
    2a52:	a0 0d       	add	r26, r0
    2a54:	61 1d       	adc	r22, r1
    2a56:	23 1f       	adc	r18, r19
    2a58:	84 9f       	mul	r24, r20
    2a5a:	60 0d       	add	r22, r0
    2a5c:	21 1d       	adc	r18, r1
    2a5e:	82 2f       	mov	r24, r18
    2a60:	76 2f       	mov	r23, r22
    2a62:	6a 2f       	mov	r22, r26
    2a64:	11 24       	eor	r1, r1
    2a66:	9f 57       	subi	r25, 0x7F	; 127
    2a68:	50 40       	sbci	r21, 0x00	; 0
    2a6a:	8a f0       	brmi	.+34     	; 0x2a8e <__mulsf3_pse+0x84>
    2a6c:	e1 f0       	breq	.+56     	; 0x2aa6 <__mulsf3_pse+0x9c>
    2a6e:	88 23       	and	r24, r24
    2a70:	4a f0       	brmi	.+18     	; 0x2a84 <__mulsf3_pse+0x7a>
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	bb 1f       	adc	r27, r27
    2a78:	66 1f       	adc	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	88 1f       	adc	r24, r24
    2a7e:	91 50       	subi	r25, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	a9 f7       	brne	.-22     	; 0x2a6e <__mulsf3_pse+0x64>
    2a84:	9e 3f       	cpi	r25, 0xFE	; 254
    2a86:	51 05       	cpc	r21, r1
    2a88:	70 f0       	brcs	.+28     	; 0x2aa6 <__mulsf3_pse+0x9c>
    2a8a:	5c cf       	rjmp	.-328    	; 0x2944 <__fp_inf>
    2a8c:	a6 cf       	rjmp	.-180    	; 0x29da <__fp_szero>
    2a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a90:	ec f3       	brlt	.-6      	; 0x2a8c <__mulsf3_pse+0x82>
    2a92:	98 3e       	cpi	r25, 0xE8	; 232
    2a94:	dc f3       	brlt	.-10     	; 0x2a8c <__mulsf3_pse+0x82>
    2a96:	86 95       	lsr	r24
    2a98:	77 95       	ror	r23
    2a9a:	67 95       	ror	r22
    2a9c:	b7 95       	ror	r27
    2a9e:	f7 95       	ror	r31
    2aa0:	e7 95       	ror	r30
    2aa2:	9f 5f       	subi	r25, 0xFF	; 255
    2aa4:	c1 f7       	brne	.-16     	; 0x2a96 <__mulsf3_pse+0x8c>
    2aa6:	fe 2b       	or	r31, r30
    2aa8:	88 0f       	add	r24, r24
    2aaa:	91 1d       	adc	r25, r1
    2aac:	96 95       	lsr	r25
    2aae:	87 95       	ror	r24
    2ab0:	97 f9       	bld	r25, 7
    2ab2:	08 95       	ret

00002ab4 <__udivmodhi4>:
    2ab4:	aa 1b       	sub	r26, r26
    2ab6:	bb 1b       	sub	r27, r27
    2ab8:	51 e1       	ldi	r21, 0x11	; 17
    2aba:	07 c0       	rjmp	.+14     	; 0x2aca <__udivmodhi4_ep>

00002abc <__udivmodhi4_loop>:
    2abc:	aa 1f       	adc	r26, r26
    2abe:	bb 1f       	adc	r27, r27
    2ac0:	a6 17       	cp	r26, r22
    2ac2:	b7 07       	cpc	r27, r23
    2ac4:	10 f0       	brcs	.+4      	; 0x2aca <__udivmodhi4_ep>
    2ac6:	a6 1b       	sub	r26, r22
    2ac8:	b7 0b       	sbc	r27, r23

00002aca <__udivmodhi4_ep>:
    2aca:	88 1f       	adc	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	5a 95       	dec	r21
    2ad0:	a9 f7       	brne	.-22     	; 0x2abc <__udivmodhi4_loop>
    2ad2:	80 95       	com	r24
    2ad4:	90 95       	com	r25
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	08 95       	ret

00002adc <_exit>:
    2adc:	f8 94       	cli

00002ade <__stop_program>:
    2ade:	ff cf       	rjmp	.-2      	; 0x2ade <__stop_program>
